@page "/programplan/create"

@* --- Using Statements --- *@
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Services
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject IAuthenticationService AuthenticationService

<h3>Create New Program Plan</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="newProgramPlan" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Program Name:</label>
        <InputText @bind-Value="newProgramPlan.ProgramNavn" class="form-control" />
    </div>

    <div>
        <label>Description:</label>
        <InputTextArea @bind-Value="newProgramPlan.Beskrivelse" class="form-control" />
    </div>

    <div>
        <label>Length (in days):</label>
        <InputNumber @bind-Value="newProgramPlan.Længde" class="form-control" />
    </div>

    <div>
        <label>Start Date:</label>
        <InputDate @bind-Value="newProgramPlan.OprettelseDato" class="form-control" />
    </div>

    <div>
        <h5>Træning(s) for the Program</h5>
        <ul>
            @foreach (var træning in newProgramPlan.Træninger)
            {
                <li>
                    @træning.TræningRækkefølge (ID: @træning.TræningID)
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveTræning(træning.TræningID)">Remove</button>
                </li>
            }
        </ul>

        <!-- Add Træning -->
        <div>
            <label>Træning Rækkefølge (Sequence):</label>
            <InputNumber @bind-Value="newTræning.TræningRækkefølge" class="form-control" />
        </div>

        <button type="button" class="btn btn-primary" @onclick="AddTræning">Add Træning</button>
    </div>

    <button type="submit" class="btn btn-success">Create Program Plan</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    private string errorMessage = "";
    private HttpClient _apiClient;

    // Initialize Program Plan DTO with default values
    private ProgramPlanDTO newProgramPlan = new ProgramPlanDTO
        {
            Træninger = new List<TræningDTO>(), // Initialize as empty list
            ETag = Guid.NewGuid().ToString(), // Set a new GUID as ETag
            ModifiedBy = "system", // Set a default ModifiedBy value
            ChangeHistoryJson = "[]" // Set ChangeHistoryJson as an empty array
        };

    // Temporary object for adding a new Træning
    private TræningDTO newTræning = new TræningDTO
        {
            ETag = Guid.NewGuid().ToString(), // Set a new GUID as ETag for each træning
            ModifiedBy = "system", // Set default ModifiedBy for each træning
            ChangeHistoryJson = "[]" // Set ChangeHistoryJson as an empty array for each træning
        };

    protected override async Task OnInitializedAsync()
    {
        _apiClient = HttpClientFactory.CreateClient("ApiClient");
        var token = await AuthenticationService.GetTokenAsync();
        var brugerId = JwtParser.GetUserIdFromJwt(token);
    }

    // Add a new træning to the program plan
    private void AddTræning()
    {
        if (newTræning.TræningRækkefølge > 0) // Ensure valid sequence
        {
            newTræning.ProgramID = newProgramPlan.ProgramID; // Ensure ProgramID is set

            // Add the new træning to the list of træninger for the program plan
            newProgramPlan.Træninger.Add(newTræning);

            // Reset newTræning for the next input
            newTræning = new TræningDTO
                {
                    ETag = Guid.NewGuid().ToString(),
                    ModifiedBy = "system",
                    ChangeHistoryJson = "[]"
                };
        }
        else
        {
            errorMessage = "Træning Rækkefølge must be greater than 0.";
        }
    }


    // Remove a træning from the program plan
    private void RemoveTræning(Guid træningId)
    {
        var træningToRemove = newProgramPlan.Træninger.FirstOrDefault(t => t.TræningID == træningId);
        if (træningToRemove != null)
        {
            newProgramPlan.Træninger.Remove(træningToRemove);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Step 1: Ensure that BrugerID is set to the authenticated user's ID (you need to get this from the authentication service)
            var token = await AuthenticationService.GetTokenAsync();
            var brugerId = JwtParser.GetUserIdFromJwt(token); // Assuming the token contains the user ID
            newProgramPlan.BrugerID = brugerId;  // Set the BrugerID to the authenticated user's ID
            newProgramPlan.ProgramID = new Guid();
            // Step 2: Ensure that each TræningDTO has the ProgramID set before sending it
            foreach (var træning in newProgramPlan.Træninger)
            {
                træning.ProgramID = newProgramPlan.ProgramID; // Ensure ProgramID is set for each TræningDTO
            }

            // Step 3: Send the new program plan to the API (ProgramPlanDTO already includes TræningDTO)
            var response = await _apiClient.PostAsJsonAsync("api/programplan", newProgramPlan);

            if (response.IsSuccessStatusCode)
            {
                // Success: Navigate to the account page
                NavigationManager.NavigateTo("/account");
            }
            else
            {
                // Failure: Extract and display the error message
                var responseBody = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to create program plan. Status: {response.StatusCode}\nDetails: {responseBody}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating program plan: {ex.Message}";
        }
    }



    private void Cancel()
    {
        NavigationManager.NavigateTo("/account");
    }
}
