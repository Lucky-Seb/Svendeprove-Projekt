@page "/register"
@using TaekwondoApp.Shared.DTO
@using AutoMapper
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IMapper Mapper

<h3>Register</h3>

<EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
    </div>

    <div>
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="registerModel.Brugernavn" />
    </div>

    <div>
        <label for="firstName">First Name:</label>
        <InputText id="firstName" class="form-control" @bind-Value="registerModel.Fornavn" />
    </div>

    <div>
        <label for="lastName">Last Name:</label>
        <InputText id="lastName" class="form-control" @bind-Value="registerModel.Efternavn" />
    </div>

    <div>
        <label for="password">Password:</label>
        <InputPassword id="password" class="form-control" @bind-Value="registerModel.Brugerkode" />
    </div>

    <div>
        <label for="belt">Belt Grade:</label>
        <InputText id="belt" class="form-control" @bind-Value="registerModel.Bæltegrad" />
    </div>

    <div>
        <label for="address">Address:</label>
        <InputText id="address" class="form-control" @bind-Value="registerModel.Address" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@if (successMessageVisible)
{
    <div class="alert alert-success mt-3">Registration successful! Redirecting to login...</div>
}

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string errorMessage;
    private bool successMessageVisible = false;

    private async Task HandleRegister()
    {
        if (string.IsNullOrWhiteSpace(registerModel.Email) ||
            string.IsNullOrWhiteSpace(registerModel.Brugernavn) ||
            string.IsNullOrWhiteSpace(registerModel.Fornavn) ||
            string.IsNullOrWhiteSpace(registerModel.Efternavn) ||
            string.IsNullOrWhiteSpace(registerModel.Brugerkode))
        {
            errorMessage = "Please fill in all required fields.";
            return;
        }

        try
        {
            // Map RegisterModel to BrugerDTO
            var brugerDTO = Mapper.Map<BrugerDTO>(registerModel);

            // Post data to the backend
            var response = await Http.PostAsJsonAsync("https://localhost:7478/api/bruger", brugerDTO);

            if (response.IsSuccessStatusCode)
            {
                // On success, show success message
                successMessageVisible = true;
                await Task.Delay(2000); // Optional delay for feedback
                Navigation.NavigateTo("/login");
            }
            else
            {
                // Handle registration failure based on the API response
                var errorResponse = await response.Content.ReadAsStringAsync();
                errorMessage = $"Registration failed: {errorResponse}";
            }
        }
        catch (Exception ex)
        {
            // Catch any exceptions during the process
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine(ex);
        }
    }

    public class RegisterModel
    {
        public string Email { get; set; }
        public string Brugernavn { get; set; }
        public string Fornavn { get; set; }
        public string Efternavn { get; set; }
        public string Brugerkode { get; set; }
        public string Bæltegrad { get; set; }
        public string Address { get; set; }
    }
}
