@page "/login"
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
        <small class="form-text text-muted">Enter your registered email.</small>
    </div>

    <div>
        <label for="password">Password:</label>
        <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
        <small class="form-text text-muted">Enter your password.</small>
    </div>

    <button type="submit" class="btn btn-primary mt-2">Login</button>
</EditForm>

@if (validationErrors.Any())
{
    <div class="alert alert-danger mt-3">
        <ul>
            @foreach (var error in validationErrors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<!-- App Logs -->
<div class="log-box mt-4" style="max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
    <h5>App Logs</h5>
    <button class="btn btn-sm btn-secondary mb-2" @onclick="() => logs.Clear()">Clear Logs</button>
    @foreach (var log in logs)
    {
        <div>@log</div>
    }
</div>

@code {
    private LoginModel loginModel = new();
    private List<string> validationErrors = new();
    private List<string> logs = new();

    private async Task HandleLogin()
    {
        validationErrors.Clear();

        if (string.IsNullOrWhiteSpace(loginModel.Email) || string.IsNullOrWhiteSpace(loginModel.Password))
        {
            validationErrors.Add("Email and password are required.");
            return;
        }

        if (!IsValidEmail(loginModel.Email))
        {
            validationErrors.Add("Please enter a valid email address.");
            return;
        }

        try
        {
            LogAction("Attempting login with:");
            LogAction($"Email: {loginModel.Email}");

            var response = await HttpClient.PostAsJsonAsync("https://localhost:7478/api/auth/login", loginModel);
            LogAction($"Response status code: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                LogAction("Login successful.");
                NavigationManager.NavigateTo("/"); // redirect to home or dashboard
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                LogAction($"Error Response: {responseContent}");

                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    validationErrors.Add("Invalid email or password.");
                }
                else
                {
                    validationErrors.Add("Login failed. Please try again.");
                }
            }
        }
        catch (Exception ex)
        {
            validationErrors.Add($"Login failed. Error: {ex.Message}");
            LogAction($"Login exception: {ex.Message}");
        }
    }

    private void LogAction(string message)
    {
        if (logs.Count > 50)
        {
            logs.RemoveAt(logs.Count - 1);
        }

        logs.Insert(0, $"{DateTime.Now:HH:mm:ss}: {message}");
    }

    private bool IsValidEmail(string email)
    {
        return email.Contains("@") && email.Contains(".");
    }

    public class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
