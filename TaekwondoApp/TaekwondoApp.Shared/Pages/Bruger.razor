@page "/bruger"
@inject HttpClient Http
@using Newtonsoft.Json;

<h1>Bruger Management</h1>

<!-- Search Filters -->
<div class="row mb-3">
    <div class="col-md-4">
        <label>Search by Name:</label>
        <input class="form-control" @bind="searchName" placeholder="Enter Bruger Name..." />
    </div>
    <div class="col-md-4">
        <label>Filter by Role:</label>
        <input class="form-control" @bind="filterRole" placeholder="Enter Role..." />
    </div>
    <div class="col-md-4 d-flex align-items-end">
        <button class="btn btn-warning" @onclick="ClearFilters">Clear Filters</button>
        <button class="btn btn-primary ml-2" @onclick="ApplyFilters">Apply Filter</button>
    </div>
</div>

<!-- Display Table -->
@if (filteredBrugers == null)
{
    <p><em>Loading...</em></p>
}
else if (filteredBrugers.Count == 0)
{
    <p><em>No bruger records match your search.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Bruger ID</th>
                <th>Brugernavn</th>
                <th>Brugerkode</th>
                <th>Fornavn</th>
                <th>Efternavn</th>
                <th>Email</th>
                <th>Bæltegrad</th>
                <th>Role</th>
                <th>Klub</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var bruger in filteredBrugers)
            {
                <tr>
                    <td>@bruger.BrugerID</td>
                    <td>@bruger.Brugernavn</td>
                    <td>@bruger.Brugerkode</td>
                    <td>@bruger.Fornavn</td>
                    <td>@bruger.Efternavn</td>
                    <td>@bruger.Email</td>
                    <td>@bruger.Bæltegrad</td>
                    <td>@bruger.Role</td>
                    <td>@bruger.Klub?.KlubNavn</td> <!-- Display Klub Name -->
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditBruger(bruger)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteBruger(bruger.BrugerID)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<h3>@(isEditing ? "Edit Bruger" : "Add New Bruger")</h3>

<EditForm Model="@bruger" OnValidSubmit="@(isEditing ? UpdateBruger : CreateBruger)">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Brugernavn:</label>
        <InputText class="form-control" @bind-Value="bruger.Brugernavn" required />
    </div>

    <div class="form-group">
        <label>Brugerkode:</label>
        <InputText class="form-control" @bind-Value="bruger.Brugerkode" required />
    </div>

    <div class="form-group">
        <label>Fornavn:</label>
        <InputText class="form-control" @bind-Value="bruger.Fornavn" required />
    </div>

    <div class="form-group">
        <label>Efternavn:</label>
        <InputText class="form-control" @bind-Value="bruger.Efternavn" required />
    </div>

    <div class="form-group">
        <label>Email:</label>
        <InputText class="form-control" @bind-Value="bruger.Email" required />
    </div>

    <div class="form-group">
        <label>Bæltegrad:</label>
        <InputText class="form-control" @bind-Value="bruger.Bæltegrad" />
    </div>

    <div class="form-group">
        <label>Role:</label>
        <InputText class="form-control" @bind-Value="bruger.Role" />
    </div>

    <div class="form-group">
        <label>Address:</label>
        <InputText class="form-control" @bind-Value="bruger.Address" />
    </div>

    <div class="form-group">
        <label>Klub:</label>
        <select class="form-control" @bind="bruger.KlubID">
            <option value="">Select Klub</option>
            @foreach (var klub in klubList)
            {
                <option value="@klub.KlubID">@klub.KlubNavn</option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-success">@(isEditing ? "Update" : "Create")</button>
    <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
</EditForm>

@if (errorMessage != null)
{
    <div class="alert alert-danger">
        <strong>Error:</strong> @errorMessage
        <br /><br />
        <strong>Data being sent:</strong>
        <pre>@errorDetails</pre>
    </div>
}

@code {
    private List<BrugerDTO> brugers = new();
    private List<BrugerDTO> filteredBrugers = new();
    private List<KlubDTO> klubList = new(); // List for Klub
    private BrugerDTO bruger = new();
    private bool isEditing = false;
    private string? errorMessage;
    private string? errorDetails; // To display what data is being sent

    private string searchName = "";
    private string filterRole = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadBrugers();
        await LoadKlub();  // Fetch Klub data
    }

    private async Task LoadBrugers()
    {
        try
        {
            brugers = await Http.GetFromJsonAsync<List<BrugerDTO>>("https://localhost:7174/api/bruger");
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading bruger records: {ex.Message}";
        }
    }

    private async Task LoadKlub()
    {
        try
        {
            klubList = await Http.GetFromJsonAsync<List<KlubDTO>>("https://localhost:7174/api/klub");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading klub records: {ex.Message}";
        }
    }

    private void ApplyFilters()
    {
        filteredBrugers = brugers
            .Where(b => (string.IsNullOrEmpty(searchName) || b.Brugernavn.Contains(searchName, StringComparison.OrdinalIgnoreCase)) &&
                        (string.IsNullOrEmpty(filterRole) || b.Role.Contains(filterRole, StringComparison.OrdinalIgnoreCase))
            )
            .ToList();
    }

    private void ClearFilters()
    {
        searchName = "";
        filterRole = "";
        ApplyFilters();
    }

    private async Task CreateBruger()
    {
        try
        {
            // Ensure Klub is set properly
            if (bruger.KlubID > 0)
            {
                var selectedKlub = klubList.FirstOrDefault(k => k.KlubID == bruger.KlubID);
                if (selectedKlub != null)
                {
                    bruger.Klub = new KlubDTO
                        {
                            KlubID = selectedKlub.KlubID,
                            KlubNavn = selectedKlub.KlubNavn
                        };
                }
            }

            // Log the data being sent for debugging
            errorDetails = JsonConvert.SerializeObject(bruger, Formatting.Indented);

            var response = await Http.PostAsJsonAsync("https://localhost:7174/api/bruger", bruger);
            if (response.IsSuccessStatusCode)
            {
                await LoadBrugers();
                bruger = new BrugerDTO();
            }
            else
            {
                errorMessage = "Failed to create bruger.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating bruger: {ex.Message}";
            errorDetails = JsonConvert.SerializeObject(bruger, Formatting.Indented); // Log the data sent
        }
    }


    private void EditBruger(BrugerDTO selectedBruger)
    {
        bruger = selectedBruger;
        isEditing = true;
    }

    private async Task UpdateBruger()
    {
        try
        {
            // Ensure Klub is set properly
            if (bruger.KlubID > 0)
            {
                var selectedKlub = klubList.FirstOrDefault(k => k.KlubID == bruger.KlubID);
                if (selectedKlub != null)
                {
                    bruger.Klub = new KlubDTO
                        {
                            KlubID = selectedKlub.KlubID,
                            KlubNavn = selectedKlub.KlubNavn
                        };
                }
            }

            // Log the data being sent for debugging
            errorDetails = JsonConvert.SerializeObject(bruger, Formatting.Indented);

            var response = await Http.PutAsJsonAsync($"https://localhost:7174/api/bruger/{bruger.BrugerID}", bruger);
            if (response.IsSuccessStatusCode)
            {
                await LoadBrugers();
                bruger = new BrugerDTO();
                isEditing = false;
            }
            else
            {
                errorMessage = "Failed to update bruger.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating bruger: {ex.Message}";
            errorDetails = JsonConvert.SerializeObject(bruger, Formatting.Indented); // Log the data sent
        }
    }

    private async Task DeleteBruger(int id)
    {
        if (!await ConfirmDelete())
        {
            return;
        }

        try
        {
            var response = await Http.DeleteAsync($"https://localhost:7174/api/bruger/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadBrugers();
            }
            else
            {
                errorMessage = "Failed to delete bruger.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting bruger: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        bruger = new BrugerDTO();
        isEditing = false;
    }

    private async Task<bool> ConfirmDelete()
    {
        return await Task.FromResult(true);
    }

    private class KlubDTO
    {
        public int KlubID { get; set; }
        public string KlubNavn { get; set; }
    }

    private class BrugerDTO
    {
        public int BrugerID { get; set; }
        public string Email { get; set; }
        public string Brugernavn { get; set; }
        public string Brugerkode { get; set; }  // Plain text password for testing purposes
        public string Fornavn { get; set; }
        public string Efternavn { get; set; }
        public string Bæltegrad { get; set; }
        public string Address { get; set; }
        public string Role { get; set; }
        public int KlubID { get; set; }
        public KlubDTO Klub { get; set; }
    }
}
