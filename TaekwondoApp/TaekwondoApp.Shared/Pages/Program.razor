@page "/programplan"
@inject HttpClient Http

<h1>Program Plan Management</h1>

@if (programPlans == null)
{
    <p><em>Loading...</em></p>
}
else if (programPlans.Count == 0)
{
    <p><em>No program plans available.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Program ID</th>
                <th>Name</th>
                <th>Created On</th>
                <th>Length</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var program in programPlans)
            {
                <tr>
                    <td>@program.ProgramID</td>
                    <td>@program.ProgramNavn</td>
                    <td>@program.OprettelseDato.ToShortDateString()</td>
                    <td>@program.Længde minutes</td>
                    <td>@program.Beskrivelse</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditProgramPlan(program)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteProgramPlan(program.ProgramID)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<h3>@(isEditing ? "Edit Program Plan" : "Add New Program Plan")</h3>

<EditForm Model="@programPlan" OnValidSubmit="@(isEditing ? UpdateProgramPlan : CreateProgramPlan)">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Program Name:</label>
        <InputText class="form-control" @bind-Value="programPlan.ProgramNavn" required />
    </div>

    <div class="form-group">
        <label>Description:</label>
        <InputTextArea class="form-control" @bind-Value="programPlan.Beskrivelse" required />
    </div>

    <div class="form-group">
        <label>Length (minutes):</label>
        <InputNumber class="form-control" @bind-Value="programPlan.Længde" required />
    </div>

    <div class="form-group">
        <label>Bruger ID:</label>
        <InputNumber class="form-control" @bind-Value="programPlan.BrugerID" required />
    </div>

    <div class="form-group">
        <label>Klub ID:</label>
        <InputNumber class="form-control" @bind-Value="programPlan.KlubID" required />
    </div>

    <h4>Træninger</h4>
    <button type="button" class="btn btn-success" @onclick="AddTræning">Add Træning</button>

    @foreach (var træning in programPlan.Træninger)
    {
        <div class="card mt-3">
            <div class="card-body">
                <label>Træning Rækkefølge:</label>
                <InputNumber class="form-control" @bind-Value="træning.TræningRækkefølge" />

                <label>Tid:</label>
                <InputNumber class="form-control" @bind-Value="træning.Tid" />

                <label>Tid:</label>
                <InputNumber class="form-control" @bind-Value="træning.ProgramID" />

                <label>Quiz ID:</label>
                <InputNumber class="form-control" @bind-Value="træning.QuizID" />

                <label>Teori ID:</label>
                <InputNumber class="form-control" @bind-Value="træning.TeoriID" />

                <label>Teknik ID:</label>
                <InputNumber class="form-control" @bind-Value="træning.TeknikID" />

                <label>Øvelse ID:</label>
                <InputNumber class="form-control" @bind-Value="træning.ØvelseID" />

                <button class="btn btn-danger mt-2" @onclick="() => RemoveTræning(træning)">Remove</button>
            </div>
        </div>
    }

    <button type="submit" class="btn btn-success">@(isEditing ? "Update" : "Create")</button>
    <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
</EditForm>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private List<ProgramPlanDTO> programPlans = new();
    private ProgramPlanDTO programPlan = new();
    private bool isEditing = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadProgramPlans();
    }

    private async Task LoadProgramPlans()
    {
        try
        {
            programPlans = await Http.GetFromJsonAsync<List<ProgramPlanDTO>>("https://localhost:7478/api/programplan/all");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading program plans: {ex.Message}";
        }
    }

    private async Task CreateProgramPlan()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7478/api/programplan", programPlan);
            if (response.IsSuccessStatusCode)
            {
                await LoadProgramPlans();
                programPlan = new ProgramPlanDTO();
            }
            else
            {
                errorMessage = "Failed to create program plan.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating program plan: {ex.Message}";
        }
    }

    private void EditProgramPlan(ProgramPlanDTO program)
    {
        programPlan = program;
        isEditing = true;
    }

    private async Task UpdateProgramPlan()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"https://localhost:7478/api/programplan/{programPlan.ProgramID}", programPlan);
            if (response.IsSuccessStatusCode)
            {
                await LoadProgramPlans();
                programPlan = new ProgramPlanDTO();
                isEditing = false;
            }
            else
            {
                errorMessage = "Failed to update program plan.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating program plan: {ex.Message}";
        }
    }

    private async Task DeleteProgramPlan(int id)
    {
        if (!await ConfirmDelete())
        {
            return;
        }

        try
        {
            var response = await Http.DeleteAsync($"https://localhost:7478/api/programplan/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadProgramPlans();
            }
            else
            {
                errorMessage = "Failed to delete program plan.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting program plan: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        programPlan = new ProgramPlanDTO();
        isEditing = false;
    }

    private void AddTræning()
    {
        programPlan.Træninger.Add(new TræningDTO());
    }

    private void RemoveTræning(TræningDTO træning)
    {
        programPlan.Træninger.Remove(træning);
    }

    private async Task<bool> ConfirmDelete()
    {
        return await Task.FromResult(true);
    }

    private class ProgramPlanDTO
    {
        public int ProgramID { get; set; }
        public string ProgramNavn { get; set; }
        public DateTime OprettelseDato { get; set; } = DateTime.Now;
        public int Længde { get; set; }
        public string Beskrivelse { get; set; }
        public int BrugerID { get; set; }
        public int KlubID { get; set; }
        public List<TræningDTO> Træninger { get; set; } = new();
    }

    private class TræningDTO
    {
        public int TræningID { get; set; }
        public int TræningRækkefølge { get; set; }
        public int Tid { get; set; }
        public int ProgramID { get; set; }
        public int? QuizID { get; set; }
        public int? TeoriID { get; set; }
        public int? TeknikID { get; set; }
        public int? ØvelseID { get; set; }
    }
}
