@page "/testpage"
@using System.Text.Json
@using TaekwondoApp.Shared.ServiceInterfaces
@using TaekwondoApp.Shared.Services
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory

<h3>Sikker Side</h3>
@if (AuthenticationService == null)
{
    <p style="color:red;">FEJL: AuthenticationService er ikke tilgængelig. Tjek DI-konfigurationen.</p>
}

@if (!isAuthenticated)
{
    <p>Du skal være logget ind for at se denne side.</p>
}
else
{
    <p>Du er logget ind og kan se denne side!</p>
    <button @onclick="Logout" class="btn btn-danger">Log ud</button>

    <h4>Frontend (JWT Parse)</h4>
    <p><strong>Rolle:</strong> @frontendRole</p>
    <p><strong>Token:</strong> @fronttoken</p>

    <h4>Backend (Claims fra /debug)</h4>
    @if (debugInfo != null)
    {
        <ul>
            <li><strong>Navn:</strong> @debugInfo.Name</li>
            <li><strong>Er Authentificeret:</strong> @debugInfo.IsAuthenticated</li>
            <li>
                <strong>Roller:</strong>
                <ul>
                    @foreach (var role in debugInfo.Roles)
                    {
                        <li>@role</li>
                    }
                </ul>
            </li>
        </ul>
    }
    else
    {
        <p>Indlæser brugerinfo...</p>
    }
}

@code {
    private bool isAuthenticated;
    private DebugResponse? debugInfo;
    private string frontendRole = "null";
    private string fronttoken = "null";

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationService == null)
        {
            Console.WriteLine("FEJL: AuthenticationService er null. Tjek DI-registreringen.");
            isAuthenticated = false;
            return;
        }

        fronttoken = await AuthenticationService.GetTokenAsync();
        isAuthenticated = !string.IsNullOrEmpty(fronttoken);

        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }

        frontendRole = JwtParser.GetRole(fronttoken);  // Sørg for at dette er sat korrekt

        try
        {
            var client = HttpClientFactory.CreateClient("ApiClient");
            var response = await client.GetAsync("api/test/debug");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                debugInfo = JsonSerializer.Deserialize<DebugResponse>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
            }
            else
            {
                Console.WriteLine($"Kunne ikke hente debug-info: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Kunne ikke hente debug-info: {ex.Message}");
        }
    }


    private async Task Logout()
    {
        await AuthenticationService.RemoveTokenAsync();
        NavigationManager.NavigateTo("/login", true);
    }

    public class DebugResponse
    {
        public string? Name { get; set; }
        public bool IsAuthenticated { get; set; }
        public List<string> Roles { get; set; } = new();
    }
}
