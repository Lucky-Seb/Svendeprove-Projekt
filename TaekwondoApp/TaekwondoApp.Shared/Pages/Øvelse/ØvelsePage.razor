@page "/øvelse"
@using AutoMapper
@using Microsoft.AspNetCore.SignalR.Client
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Helper
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.ServiceInterfaces
@using TaekwondoApp.Shared.Services

@inject NavigationManager NavigationManager
@inject IMapper _mapper
@inject IHttpClientFactory HttpClientFactory
@inject AuthStateProvider AuthStateProvider
@inject IAuthenticationService AuthenticationService

<h1>Øvelse Management</h1>

<!-- Search Filters -->
<div class="row mb-3">
    <div class="col-md-4">
        <label>Search by Øvelse Name:</label>
        <input class="form-control" @bind="searchØvelseName" placeholder="Enter Øvelse name..." />
    </div>
    <div class="col-md-4 d-flex align-items-end">
        <button class="btn btn-warning" @onclick="ClearFilters">Clear Filters</button>
        <button class="btn btn-primary ml-2" @onclick="ApplyFilters">Apply Filter</button>
    </div>
</div>

<!-- Display Table -->
@if (filteredØvelser == null)
{
    <p><em>Loading...</em></p>
}
else if (filteredØvelser.Count == 0)
{
    <p><em>No Øvelse records match your search.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var øvelse in filteredØvelser)
            {
                <tr>
                    <td>
                        <a @onclick="() => NavigateToØvelse(øvelse.ØvelseID)" style="cursor:pointer; text-decoration: underline;">
                            @øvelse.ØvelseNavn
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />
@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private List<ØvelseDTO> availableØvelser = new();
    private List<ØvelseDTO> filteredØvelser = new();
    private string? errorMessage;
    private HttpClient _apiClient;
    private string token = string.Empty;
    private string searchØvelseName = "";
    private BrugerDTO? brugerDTO = null;

    protected override async Task OnInitializedAsync()
    {
        _apiClient = HttpClientFactory.CreateClient("ApiClient");
        await LoadØvelser();
    }

    private async Task LoadØvelser()
    {
        try
        {
            token = await AuthenticationService.GetTokenAsync();

            if (string.IsNullOrEmpty(token))
            {
                // If not logged in, fetch Øvelse data that is not owned by any klub or bruger
                await LoadØvelserForNonLoggedInUser();
            }
            else
            {
                // If logged in, fetch Øvelse data that belongs to the user and their clubs
                await LoadØvelserForLoggedInUser();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading Øvelse data: {ex.Message}";
        }
    }

    private async Task LoadØvelserForLoggedInUser()
    {
        var brugerId = JwtParser.GetUserIdFromJwt(token);

        try
        {
            var brugerResponse = await _apiClient.GetFromJsonAsync<ApiResponse<BrugerDTO>>($"api/bruger/details/{brugerId}");
            if (brugerResponse?.Success == true && brugerResponse.Data != null)
            {
                brugerDTO = brugerResponse.Data;
                StateHasChanged();
            }
            else
            {
                errorMessage = "Failed to fetch user data.";
            }

            var klubIds = brugerDTO?.BrugerKlubber.Select(k => k.KlubID).ToList();
            var klubIdsString = klubIds != null ? string.Join(",", klubIds) : string.Empty;

            // Fetching Øvelse data for logged-in user with the necessary query parameters
            var response = await _apiClient.GetFromJsonAsync<ApiResponse<List<ØvelseDTO>>>(
                $"api/øvelse/own/?brugerId={brugerDTO?.BrugerID}&klubIds={klubIdsString}");

            if (response?.Success == true && response.Data != null)
            {
                availableØvelser = _mapper.Map<List<ØvelseDTO>>(response.Data);
                ApplyFilters();
            }
            else
            {
                errorMessage = "Failed to fetch Øvelse data.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading user data: {ex.Message}";
        }
    }

    private async Task LoadØvelserForNonLoggedInUser()
    {
        try
        {
            // Fetching Øvelse data without any specific parameters for non-logged-in users
            var response = await _apiClient.GetFromJsonAsync<ApiResponse<List<ØvelseDTO>>>("api/øvelse/own");

            if (response?.Success == true && response.Data != null)
            {
                availableØvelser = _mapper.Map<List<ØvelseDTO>>(response.Data);
                ApplyFilters();
            }
            else
            {
                errorMessage = "Failed to fetch available Øvelse.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading Øvelse data: {ex.Message}";
        }
    }

    private void ApplyFilters()
    {
        filteredØvelser = availableØvelser
            .Where(o => string.IsNullOrEmpty(searchØvelseName) || o.ØvelseNavn.Contains(searchØvelseName, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void ClearFilters()
    {
        searchØvelseName = "";
        ApplyFilters();
    }

    private void NavigateToØvelse(Guid øvelseId)
    {
        NavigationManager.NavigateTo($"/øvelse/{øvelseId}");
    }
}
