@page "/øvelse/update/{øvelseId:guid}"
@page "/admin/klub/{klubId:guid}/rediger-øvelse/{øvelseId:guid}"

@* --- Bruger Using Statements --- *@
@using System.Text.Json
@using AutoMapper
@using Microsoft.AspNetCore.SignalR.Client
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Helper
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.ServiceInterfaces
@using TaekwondoApp.Shared.Services
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject IAuthenticationService AuthenticationService

<h3>Rediger Øvelse</h3>

@if (loading)
{
    <p>Indlæser...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    <EditForm Model="editModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Navn:</label>
            <InputText @bind-Value="editModel.ØvelseNavn" class="form-control" />
        </div>

        <div>
            <label>Beskrivelse:</label>
            <InputTextArea @bind-Value="editModel.ØvelseBeskrivelse" class="form-control" />
        </div>

        <div>
            <label>Billede-URL:</label>
            <InputText @bind-Value="editModel.ØvelseBillede" class="form-control" />
        </div>

        <div>
            <label>Video-URL:</label>
            <InputText @bind-Value="editModel.ØvelseVideo" class="form-control" />
        </div>

        <div>
            <label>Varighed (sekunder):</label>
            <InputNumber @bind-Value="editModel.ØvelseTid" class="form-control" />
        </div>

        <div>
            <label>Sværhedsgrad:</label>
            <InputText @bind-Value="editModel.ØvelseSværhed" class="form-control" />
        </div>

        <div>
            <label>Pensum:</label>
            <select @bind="editModel.PensumID" class="form-control">
                <option value="">-- Vælg Pensum --</option>
                @foreach (var pensum in pensumGradList)
                {
                    <option value="@pensum.PensumID">@pensum.PensumGrad</option>
                }
            </select>
        </div>

        <button type="submit" class="btn btn-primary">Gem</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Annullér</button>
    </EditForm>
}

@code {
    [Parameter] public Guid? klubId { get; set; } // Valgfri for admin-rute
    [Parameter] public Guid øvelseId { get; set; }

    private ØvelseDTO editModel = new();
    private bool loading = true;
    private string errorMessage = "";
    private HttpClient _apiClient;
    private List<Pensum> pensumGradList = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _apiClient = HttpClientFactory.CreateClient("ApiClient");

            var token = await AuthenticationService.GetTokenAsync();
            var brugerId = JwtParser.GetUserIdFromJwt(token);
            Console.WriteLine($"Indlæst BrugerID: {brugerId}");

            // Hent Øvelse
            var response = await _apiClient.GetFromJsonAsync<ApiResponse<ØvelseDTO>>($"api/øvelse/{øvelseId}");
            if (response?.Success == true && response.Data != null)
            {
                editModel = response.Data;
                Console.WriteLine($"Indlæst Øvelse: {JsonSerializer.Serialize(editModel)}");
            }
            else
            {
                errorMessage = "Kunne ikke indlæse øvelse.";
            }

            // Hent Pensum-liste
            var pensumResponse = await _apiClient.GetFromJsonAsync<ApiResponse<List<Pensum>>>("api/pensum");
            if (pensumResponse?.Success == true && pensumResponse.Data != null)
            {
                pensumGradList = pensumResponse.Data;
                Console.WriteLine("Pensum-liste indlæst.");
            }
            else
            {
                errorMessage = "Kunne ikke indlæse pensumgrader.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved indlæsning af øvelse eller pensum: {ex.Message}";
            Console.WriteLine($"Exception: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            Console.WriteLine("Sender opdatering...");
            Console.WriteLine($"ØvelseID: {editModel.ØvelseID}");
            Console.WriteLine($"PensumID: {editModel.PensumID}");

            editModel.ModifiedBy = "system";
            editModel.ETag ??= Guid.NewGuid().ToString();
            editModel.ChangeHistoryJson ??= "[]";

            if (klubId.HasValue)
            {
                Console.WriteLine("Øvelsen tilhører en klub.");
                editModel.KlubID = klubId.Value;
            }
            else
            {
                Console.WriteLine("Øvelsen tilhører en bruger.");
                var brugerId = JwtParser.GetUserIdFromJwt(await AuthenticationService.GetTokenAsync());
                editModel.BrugerID = brugerId;
            }

            var response = await _apiClient.PutAsJsonAsync($"api/øvelse/{editModel.ØvelseID}", editModel);

            Console.WriteLine($"Svarstatus: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("✔ Øvelse opdateret.");

                if (klubId.HasValue)
                {
                    NavigationManager.NavigateTo($"/admin/klub/{klubId}");
                }
                else
                {
                    NavigationManager.NavigateTo("/account");
                }
            }
            else
            {
                var body = await response.Content.ReadAsStringAsync();
                Console.WriteLine("❌ Fejl ved opdatering af øvelse.");
                Console.WriteLine($"Svarindhold: {body}");
                errorMessage = $"Kunne ikke opdatere øvelse. Status: {response.StatusCode}\nDetaljer: {body}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
            errorMessage = $"Fejl under opdatering af øvelse: {ex.Message}";
        }
    }

    private void Cancel()
    {
        if (klubId.HasValue)
        {
            NavigationManager.NavigateTo($"/admin/klub/{klubId}");
        }
        else
        {
            NavigationManager.NavigateTo("/account");
        }
    }
}
