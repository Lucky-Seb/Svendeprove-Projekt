@page "/ordbog"
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.Services
@using AutoMapper
@using Microsoft.AspNetCore.SignalR.Client
@inject IOrdbogSyncService OrdbogSyncService
@inject ISQLiteService SQLiteService
@inject NavigationManager NavigationManager
@inject IMapper _mapper
@inject IHttpClientFactory HttpClientFactory
@inject AuthStateProvider AuthStateProvider
@implements IAsyncDisposable


<h1>Ordbog</h1>

<!-- Online/Offline Indicator -->
<div class="alert @(internet ? "alert-success" : "alert-warning")">
    Status: @(internet ? "Online - Changes will sync automatically." : "Offline - Changes are stored locally and will sync when you're back online.")
</div>

<!-- Sync Status UI -->
@if (syncFailed)
{
    <div class="alert alert-danger d-flex justify-content-between align-items-center">
        <span>Last sync attempt failed.</span>
        <button class="btn btn-sm btn-danger" @onclick="TrySyncIfOnline">Retry Sync</button>
    </div>
}
@if (isSyncing is true)
{
    <div class="d-flex align-items-center mb-3">
        <div class="spinner-border text-primary me-2" role="status">
            <span class="visually-hidden">Syncing...</span>
        </div>
        <span>Syncing local changes...</span>
    </div>
}

<!-- Simulated Internet Toggle -->
<div class="mb-3">
    <button class="btn @(internet ? "btn-outline-danger" : "btn-outline-success")" @onclick="ToggleInternet">
        @(internet ? "Go Offline (Simulated)" : "Go Online (Simulated)")
    </button>
</div>
<!-- Show Deleted Entries Toggle -->
<div class="form-check mb-3">
    <InputCheckbox class="form-check-input" @bind-Value="showDeleted" />
    <label class="form-check-label">Show Deleted Entries</label>
</div>

<!-- Search -->
<div class="mb-3 row">
    <div class="col-md-4">
        <label>Search (Dansk/Koransk):</label>
        <InputText class="form-control" @bind-Value="searchTerm" />
    </div>
    <div class="col-md-4 d-flex align-items-end">
        <button class="btn btn-primary me-2" @onclick="ApplyFilter">Search</button>
        <button class="btn btn-secondary" @onclick="ClearSearch">Clear</button>
    </div>
</div>

<!-- App Logs -->
<div class="log-box" style="max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; margin-top: 20px;">
    <h4>App Logs</h4>
    @foreach (var log in logs.Reverse<string>())
    {
        <div>@log</div>
    }
</div>

<!-- List -->
@if (filteredWords == null || !filteredWords.Any())
{
    <p><em>Loading entries...</em></p>
}
else if (!filteredWords.Any())
{
    <p><em>No matching entries found.</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Dansk</th>
                <th>Koransk</th>
                <th>Beskrivelse</th>
                <th>Billede</th>
                <th>Lyd</th>
                <th>Video</th>
                <th>Status</th>
                <th>Conflict</th>
                <th>Modified By</th>
                <th>Last Modified</th>
                <th>Created At</th>
                <th>ETag</th>
                <th>Is Deleted</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var word in filteredWords)
            {
                <tr>
                    <td>@word.OrdbogId</td>
                    <td>@word.DanskOrd</td>
                    <td>@word.KoranskOrd</td>
                    <td>@word.Beskrivelse</td>
                    <td>
                        @if (!string.IsNullOrEmpty(word.BilledeLink))
                        {
                            <img src="@word.BilledeLink" width="50" />
                        }
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(word.LydLink))
                        {
                            <audio controls src="@word.LydLink" />
                        }
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(word.VideoLink))
                        {
                            <a href="@word.VideoLink" target="_blank">Video</a>
                        }
                    </td>
                    <td>
                        <span class="badge @(word.Status switch
                        {
                            SyncStatus.Pending => "bg-success",
                            SyncStatus.Synced => "bg-warning text-dark",
                            SyncStatus.Failed => "bg-danger",
                            SyncStatus.Deleted => "bg-secondary",
                            _ => "bg-light"
                        })">@word.Status</span>
                    </td>
                    <td>@word.ConflictStatus</td>
                    <td>@word.ModifiedBy</td>
                    <td>@word.LastModified.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@word.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@word.ETag</td>
                    <td>
                        @if (word.IsDeleted)
                        {
                            <span class="text-danger">Yes</span>
                        }
                        else
                        {
                            <span class="text-success">No</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => EditEntry(word)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteEntry(word.OrdbogId)">Delete</button>
                        <button class="btn btn-sm btn-warning" @onclick="() => RestoreEntry(word.OrdbogId)">Restore</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<h3>@(isEditing ? "Edit Entry" : "Add New Entry")</h3>

<EditForm Model="entryModel" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-2">
        <label>Dansk Ord:</label>
        <InputText class="form-control" @bind-Value="entryModel.DanskOrd" required />
    </div>

    <div class="form-group mb-2">
        <label>Koransk Ord:</label>
        <InputText class="form-control" @bind-Value="entryModel.KoranskOrd" required />
    </div>

    <div class="form-group mb-2">
        <label>Beskrivelse:</label>
        <InputTextArea class="form-control" @bind-Value="entryModel.Beskrivelse" />
    </div>

    <div class="form-group mb-2">
        <label>Billede Link:</label>
        <InputText class="form-control" @bind-Value="entryModel.BilledeLink" />
    </div>

    <div class="form-group mb-2">
        <label>Lyd Link:</label>
        <InputText class="form-control" @bind-Value="entryModel.LydLink" />
    </div>

    <div class="form-group mb-2">
        <label>Video Link:</label>
        <InputText class="form-control" @bind-Value="entryModel.VideoLink" />
    </div>

    <button type="submit" class="btn btn-success">@((isEditing ? "Update" : "Create"))</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}


@code {
    private OrdbogDTO[] filteredWords = Array.Empty<OrdbogDTO>();
    private List<string> logs = new List<string>();
    private OrdbogDTO entryModel = new OrdbogDTO();  // Already initialized
    private bool isEditing = false;
    private bool isSyncing = false;
    private bool syncFailed = false;
    private bool internet = true; // Simulate the internet status for the app
    private string errorMessage = string.Empty;
    private string searchTerm = string.Empty;
    private bool showDeleted = false;
    private HttpClient _apiClient; // <--- This must be declared at the class level
    private bool isAuthenticated;
    private string? role;
    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        AuthStateProvider.OnChange += StateChanged;
        StateChanged();

        try
        {
            _apiClient = HttpClientFactory.CreateClient("ApiClient");
            LogAction("App initializing...");

            if (internet)
            {
                LogAction("App Has internet...");
                try
                {
                    LogAction("App Try to Sync...");
                    await TrySyncIfOnline();
                    LogAction("✅ Synced from server to local.");
                }
                catch (Exception ex)
                {
                    LogAction("❌ Error syncing from server to local: " + ex.Message);
                }
            }

            await LoadEntries();
            LogAction("✅ Entries loaded.");

            // 🔄 SignalR connection setup
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/ordboghub"))
                .WithAutomaticReconnect()
                .Build();

            _hubConnection.On("OrdbogUpdated", async () =>
            {
                LogAction("🔄 Received EntriesUpdated event from server.");
                await LoadEntries();
                StateHasChanged();
            });

            await _hubConnection.StartAsync();
            LogAction("✅ SignalR connection established.");
        }
        catch (Exception ex)
        {
            LogAction($"❌ Error during OnInitializedAsync: {ex.Message}");
            errorMessage = $"Error during initialization: {ex.Message}\n{ex.StackTrace}";
        }
    }

    private async Task LoadEntries()
    {
        try
        {
            if (internet)
            {
                await TrySyncIfOnline();
                LogAction("Loading entries from the server...");
                isSyncing = false;
                try
                {
                    using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10)); // add timeout
                    var response = await _apiClient.GetFromJsonAsync<ApiResponse<List<Ordbog>>>("api/ordbog/including-deleted", cts.Token);

                    if (response != null && response.Success)
                    {
                        // Map the response data if the call is successful
                        var allEntries = _mapper.Map<List<OrdbogDTO>>(response.Data);
                        filteredWords = allEntries
                            .Where(e => showDeleted || !e.IsDeleted)
                            .ToArray();
                        LogAction($"{filteredWords.Length} entries loaded from the server.");
                    }
                    else
                    {
                        // Handle failure or invalid response
                        LogAction("Server returned null, invalid data, or an error occurred.");
                        if (response?.Errors != null)
                        {
                            foreach (var error in response.Errors)
                            {
                                LogAction($"Error: {error}");
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    LogAction($"Error fetching from server: {ex.Message}");
                    errorMessage = $"Error fetching from server: {ex.Message}";
                    Console.WriteLine(ex); // For stacktrace visibility
                }
            }
            else
            {
                try
                {
                    var response = await SQLiteService.GetAllEntriesAsync();

                    if (response != null)
                    {
                        var allEntries = _mapper.Map<List<OrdbogDTO>>(response);
                        filteredWords = allEntries
                            .Where(e => showDeleted || !e.IsDeleted)
                            .ToArray();
                        LogAction($"{filteredWords.Length} entries loaded from the Local Database.");
                    }
                    else
                    {
                        LogAction("Local Database returned null or invalid data.");
                    }
                }
                catch (Exception ex)
                {
                    LogAction($"Error fetching from Local Database: {ex.Message}");
                    errorMessage = $"Error fetching from Local Database: {ex.Message}";
                    Console.WriteLine(ex); // For stacktrace visibility
                }
            }
        }
        catch (Exception ex)
        {
            LogAction($"Error loading entries: {ex.Message}");
            errorMessage = $"Error loading entries: {ex.Message}";  // Display the error in the UI
        }
    }

    private async Task ToggleInternet()
    {
        internet = !internet;
        LogAction($"Internet toggled {(internet ? "ON" : "OFF")}.");
        await LoadEntries();
    }

    private async Task CreateEntry()
    {
        try
        {
            if (internet)
            {
                Ordbog entryModelMapped = _mapper.Map<Ordbog>(entryModel);
                entryModelMapped.ETag = entryModel.DanskOrd + entryModel.KoranskOrd;
                entryModelMapped.ModifiedBy = "user123";

                var response = await _apiClient.PostAsJsonAsync("api/ordbog", entryModelMapped);

                if (response.IsSuccessStatusCode)
                {
                    LogAction("Entry created on the server.");
                    await LoadEntries();
                    await SQLiteService.MarkAsSyncedAsync(entryModel.OrdbogId);
                }
                else
                {
                    var content = await response.Content.ReadAsStringAsync();
                    errorMessage = $"Failed to create entry on the server: {response.StatusCode} - {content}";
                    LogAction(errorMessage);
                }
            }
            else
            {
                Ordbog entryModelMapped = _mapper.Map<Ordbog>(entryModel);
                entryModelMapped.ETag = GenerateETag(entryModelMapped);
                await SQLiteService.AddEntryAsync(entryModelMapped);
                LogAction("Entry created locally.");
                await LoadEntries();
            }

            await TrySyncIfOnline();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating entry: {ex.Message}";
            LogAction(errorMessage);
        }
    }


    private string GenerateETag(Ordbog entry)
    {
        return $"{entry.DanskOrd}-{entry.KoranskOrd}";
    }

    private async Task UpdateEntry(Ordbog entry)
    {
        try
        {
            if (internet)
            {
                entry.ETag = GenerateETag(entry);
                entry.ModifiedBy = "user123";

                var response = await _apiClient.PutAsJsonAsync($"api/ordbog/including-deleted/{entry.OrdbogId}", entry);

                if (response.IsSuccessStatusCode)
                {
                    LogAction("Entry updated on the server.");
                    await LoadEntries();
                    await SQLiteService.MarkAsSyncedAsync(entry.OrdbogId);
                }
                else
                {
                    var content = await response.Content.ReadAsStringAsync();
                    errorMessage = $"Failed to update entry: {response.StatusCode} - {content}";
                    LogAction(errorMessage);
                }
            }
            else
            {
                await SQLiteService.UpdateEntryAsync(entry);
                LogAction("Entry updated locally.");
                await LoadEntries();
            }

            await TrySyncIfOnline();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating entry: {ex.Message}";
            LogAction(errorMessage);
        }
    }

    private async Task DeleteEntry(Guid OrdbogId)
    {
        try
        {
            if (internet)
            {
                var wordToDelete = filteredWords.FirstOrDefault(w => w.OrdbogId == OrdbogId);

                if (wordToDelete != null)
                {
                    wordToDelete.IsDeleted = true;
                    wordToDelete.Status = SyncStatus.Deleted;

                    var response = await _apiClient.PutAsJsonAsync($"api/ordbog/including-deleted/{wordToDelete.OrdbogId}", wordToDelete);

                    if (response.IsSuccessStatusCode)
                    {
                        LogAction("✅ Entry marked as deleted on server.");
                    }
                    else
                    {
                        var details = await response.Content.ReadAsStringAsync();
                        LogAction($"❌ Failed to delete: {details}");
                    }
                }
            }

            await SQLiteService.MarkAsDeletedAsync(OrdbogId);
            LogAction("✅ Entry marked as deleted locally.");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting entry: {ex.Message}";
            LogAction(errorMessage);
        }

        await LoadEntries();
    }

    private async Task TrySyncIfOnline()
    {
        if (internet)
        {
            LogAction("Attempting to sync data from server...");
            isSyncing = true;

            try
            {
                await OrdbogSyncService.SyncDataAsync();
                syncFailed = false;
                LogAction("✅ Data synced.");
            }
            catch (Exception ex)
            {
                syncFailed = true;
                LogAction($"❌ Sync failed: {ex.Message}");
            }

            isSyncing = false;
        }
        else
        {
            syncFailed = true;
            LogAction("❌ Cannot sync: No internet.");
        }
    }

    private void CancelEdit()
    {
        entryModel = new OrdbogDTO();
        isEditing = false;
        LogAction("Edit canceled.");
    }

    private Task EditEntry(OrdbogDTO entry)
    {
        entryModel = entry;
        isEditing = true;
        LogAction($"Editing entry: {entry.OrdbogId}");
        return Task.CompletedTask;
    }

    private async Task ApplyFilter()
    {
        if (!string.IsNullOrEmpty(searchTerm))
        {
            LogAction($"Applying search filter: {searchTerm}");

            // Filter the words based on search term (matching in Dansk or Koransk)
            filteredWords = filteredWords
                .Where(w =>
                    (!string.IsNullOrEmpty(w.DanskOrd) && w.DanskOrd.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                    (!string.IsNullOrEmpty(w.KoranskOrd) && w.KoranskOrd.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                )
                .ToArray();

            LogAction($"{filteredWords.Length} entries matched the search term.");
        }
        else
        {
            LogAction("Search term is empty. Showing all entries.");
            await LoadEntries();
        }
    }

    private async void ClearSearch()
    {
        LogAction("Clearing search filter...");
        searchTerm = string.Empty;
        await LoadEntries();
    }

    private void LogAction(string message)
    {
        if (logs.Count > 50)  // Limit logs to 50 entries
        {
            logs.RemoveAt(logs.Count - 1);  // Remove the oldest entry
        }
        logs.Insert(0, $"{DateTime.Now}: {message}");
    }

    private async Task HandleSubmit()
    {
        // If the model is in edit mode
        if (isEditing)
        {
            // Map OrdbogDTO to Ordbog
            Ordbog entry = _mapper.Map<Ordbog>(entryModel);
            await UpdateEntry(entry);  // Update existing entry
        }
        else
        {
            // Map OrdbogDTO to Ordbog
            Ordbog entry = _mapper.Map<Ordbog>(entryModel);
            await CreateEntry();  // Create new entry
        }
    }

    private async Task RestoreEntry(Guid OrdbogId)
    {
        try
        {
            // Log initial parameters and conditions
            LogAction($"Starting RestoreEntry for OrdbogId: {OrdbogId}, internet status: {internet}");

            if (internet)
            {
                // Find the word in filteredWords collection
                var wordToRestore = filteredWords.FirstOrDefault(w => w.OrdbogId == OrdbogId);

                // Log if the word is found or not
                if (wordToRestore != null)
                {
                    LogAction($"Word found: {wordToRestore.DanskOrd} ({wordToRestore.OrdbogId}), Status: {wordToRestore.Status}, IsDeleted: {wordToRestore.IsDeleted}");

                    // Set IsDeleted to false to restore the word
                    wordToRestore.IsDeleted = false;
                    wordToRestore.Status = SyncStatus.Synced;
                    LogAction($"Word restored locally: {wordToRestore.DanskOrd}, Status set to {wordToRestore.Status}, IsDeleted set to {wordToRestore.IsDeleted}");

                    // Send a PUT request to restore the entry on the server
                    LogAction($"Sending PUT request to restore entry on server. URL: api/ordbog/restore/{wordToRestore.OrdbogId}");
                    var response = await _apiClient.PutAsJsonAsync($"api/ordbog/restore/{wordToRestore.OrdbogId}", wordToRestore);

                    // Log the response status code and the outcome of the request
                    if (response.IsSuccessStatusCode)
                    {
                        LogAction($"✅ Entry restored on server successfully. Status Code: {response.StatusCode}");
                    }
                    else
                    {
                        LogAction($"❌ Failed to restore entry on server. Status Code: {response.StatusCode}, Reason: {response.ReasonPhrase}");
                        errorMessage = $"Failed to restore entry on server. Status Code: {response.StatusCode}, Reason: {response.ReasonPhrase}";
                    }
                }
                else
                {
                    LogAction($"❌ Word to restore not found in filteredWords collection. OrdbogId: {OrdbogId}");
                }
            }
            else
            {
                LogAction("❌ No internet connection. Cannot restore entry on the server.");
            }

            // Log the attempt to restore locally
            LogAction($"Attempting to restore entry locally in SQLite database for OrdbogId: {OrdbogId}");
            await SQLiteService.MarkAsRestoredAsync(OrdbogId);
            LogAction($"✅ Entry restored locally in SQLite database for OrdbogId: {OrdbogId}");
            LoadEntries();
        }
        catch (Exception ex)
        {
            // Log error details
            LogAction($"Error restoring entry for OrdbogId: {OrdbogId}, Exception: {ex.Message}, StackTrace: {ex.StackTrace}");
            errorMessage = $"Error restoring entry: {ex.Message}";
            Console.WriteLine(ex);
        }
    }
    private void StateChanged()
    {
        isAuthenticated = AuthStateProvider.IsAuthenticated;
        role = AuthStateProvider.Role;
        InvokeAsync(StateHasChanged); // Refresh UI
    }
    public async ValueTask DisposeAsync()
    {
        AuthStateProvider.OnChange -= StateChanged;

        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}