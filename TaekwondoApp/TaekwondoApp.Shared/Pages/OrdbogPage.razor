@page "/ordbog"

@* --- Using Statements --- *@
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.Services
@using TaekwondoApp.Shared.Helper
@using AutoMapper
@using Microsoft.AspNetCore.SignalR.Client

@* --- Dependency Injection --- *@
@inject IOrdbogSyncService OrdbogSyncService
@inject ISQLiteService SQLiteService
@inject NavigationManager NavigationManager
@inject IMapper _mapper
@inject IHttpClientFactory HttpClientFactory
@inject AuthStateProvider AuthStateProvider
@inject IAuthenticationService AuthenticationService
@inject SignalRService SignalRService
@implements IAsyncDisposable

<h1>Ordbog</h1>

<div class="alert @(internet ? "alert-success" : "alert-warning")">
    Status: @(internet ? "Online - Ændringer synkroniseres automatisk." : "Offline - Ændringer gemmes lokalt og vil blive synkroniseret, når du er online igen.")
</div>

@if (syncFailed)
{
    <div class="alert alert-danger d-flex justify-content-between align-items-center">
        <span>Sidste synkroniseringsforsøg mislykkedes.</span>
        <button class="btn btn-sm btn-danger" @onclick="TrySyncIfOnline">Prøv igen</button>
    </div>
}
@if (isSyncing is true)
{
    <div class="d-flex align-items-center mb-3">
        <div class="spinner-border text-primary me-2" role="status">
            <span class="visually-hidden">Synkroniserer...</span>
        </div>
        <span>Synkroniserer lokale ændringer...</span>
    </div>
}

<div class="mb-3">
    <button class="btn @(internet ? "btn-outline-danger" : "btn-outline-success")" @onclick="ToggleInternet">
        @(internet ? "Gå offline (simuleret)" : "Gå online (simuleret)")
    </button>
</div>

<div class="form-check mb-3">
    <InputCheckbox class="form-check-input" @bind-Value="showDeleted" />
    <label class="form-check-label">Vis slettede opslag</label>
</div>

<div class="mb-3 row">
    <div class="col-md-4">
        <label>Søg (Dansk/Koransk):</label>
        <InputText class="form-control" @bind-Value="searchTerm" />
    </div>
    <div class="col-md-4 d-flex align-items-end">
        <button class="btn btn-primary me-2" @onclick="ApplyFilter">Søg</button>
        <button class="btn btn-secondary" @onclick="ClearSearch">Ryd</button>
    </div>
</div>

<div class="log-box" style="max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; margin-top: 20px;">
    <h4>App-log</h4>
    @foreach (var log in logs.Reverse<string>())
    {
        <div>@log</div>
    }
</div>

@if (filteredWords == null || !filteredWords.Any())
{
    <p><em>Indlæser opslag...</em></p>
}
else if (!filteredWords.Any())
{
    <p><em>Ingen matchende opslag fundet.</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Dansk</th>
                <th>Koransk</th>
                <th>Beskrivelse</th>
                <th>Billede</th>
                <th>Lyd</th>
                <th>Video</th>
                <th>Status</th>
                <th>Konflikt</th>
                <th>Ændret af</th>
                <th>Sidst ændret</th>
                <th>Oprettet</th>
                <th>ETag</th>
                <th>Slettet</th>
                <th>Handlinger</th>
            </tr>
        </thead>
        <tbody>
            @* ... *@
        </tbody>
    </table>
}

<hr />

<h3>@(isEditing ? "Rediger opslag" : "Tilføj nyt opslag")</h3>

<EditForm Model="entryModel" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-2">
        <label>Dansk ord:</label>
        <InputText class="form-control" @bind-Value="entryModel.DanskOrd" required />
    </div>

    <div class="form-group mb-2">
        <label>Koransk ord:</label>
        <InputText class="form-control" @bind-Value="entryModel.KoranskOrd" required />
    </div>

    <div class="form-group mb-2">
        <label>Beskrivelse:</label>
        <InputTextArea class="form-control" @bind-Value="entryModel.Beskrivelse" />
    </div>

    <div class="form-group mb-2">
        <label>Billedlink:</label>
        <InputText class="form-control" @bind-Value="entryModel.BilledeLink" />
    </div>

    <div class="form-group mb-2">
        <label>Lydlink:</label>
        <InputText class="form-control" @bind-Value="entryModel.LydLink" />
    </div>

    <div class="form-group mb-2">
        <label>Videolink:</label>
        <InputText class="form-control" @bind-Value="entryModel.VideoLink" />
    </div>

    <button type="submit" class="btn btn-success">@((isEditing ? "Opdater" : "Opret"))</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Annuller</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}


@code {
    // ========== Fields & State ==========
    private OrdbogDTO[] filteredWords = Array.Empty<OrdbogDTO>();
    private List<string> logs = new();
    private OrdbogDTO entryModel = new();
    private bool isEditing = false;
    private bool isSyncing = false;
    private bool syncFailed = false;
    private bool internet = true;
    private bool isAuthenticated;
    private string? role;
    private string searchTerm = string.Empty;
    private string errorMessage = string.Empty;
    private bool showDeleted = false;
    private string token = "";
    private string brugerToken = "";
    private HttpClient _apiClient;
    private HubConnection _hubConnection;

    // ========== Lifecycle ==========
    protected override async Task OnInitializedAsync()
    {
        AuthStateProvider.OnChange += StateChanged;
        StateChanged();
        try
        {
            token = await AuthenticationService.GetTokenAsync(); // assign to the class field!

        }
        catch (Exception ex)
        {
            LogAction($"❌ No Auth Token: {ex.Message}");
            errorMessage = $"Could not get Auth Token: {ex.Message}\n{ex.StackTrace}";
        }

        try
        {
            _apiClient = HttpClientFactory.CreateClient("ApiClient");
            LogAction("App initializing...");

            if (internet)
            {
                LogAction("App has internet. Trying to sync...");
                try
                {
                    await TrySyncIfOnline();
                    LogAction("✅ Synced from server to local.");
                }
                catch (Exception ex)
                {
                    LogAction("❌ Error syncing: " + ex.Message);
                }
            }
            // Start the SignalR connection
            await SignalRService.StartConnectionAsync();
            Console.WriteLine("✅ SignalR connection established.");
            await LoadEntries();
            LogAction("✅ Entries loaded.");
        }
        catch (Exception ex)
        {
            LogAction($"❌ Initialization error: {ex.Message}");
            errorMessage = $"Error during initialization: {ex.Message}\n{ex.StackTrace}";
        }
        SignalRService.HubConnection.On("OrdbogUpdated", async () =>
        {
        Console.WriteLine("🔄 OrdbogUpdated event received. Reloading entries...");
        await LoadEntries(); // Reload the data
        });
    }

    public async ValueTask DisposeAsync()
    {
        AuthStateProvider.OnChange -= StateChanged;

        // Remove the event handler when the component is disposed
        SignalRService.HubConnection.Remove("OrdbogUpdated");

        // Existing disposal code...
        await SignalRService.StopConnectionAsync();
    }

    private void StateChanged()
    {
        isAuthenticated = AuthStateProvider.IsAuthenticated;
        role = AuthStateProvider.Role;
        InvokeAsync(StateHasChanged);
    }

    // ========== Data Loading ==========
    private async Task LoadEntries()
    {
        try
        {
            if (internet)
            {
                await TrySyncIfOnline();
                LogAction("Loading entries from the server...");

                try
                {
                    using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
                    var response = await _apiClient.GetFromJsonAsync<ApiResponse<List<Ordbog>>>("api/ordbog/including-deleted", cts.Token);

                    if (response?.Success == true)
                    {
                        var allEntries = _mapper.Map<List<OrdbogDTO>>(response.Data);
                        filteredWords = allEntries.Where(e => showDeleted || !e.IsDeleted).ToArray();
                        LogAction($"{filteredWords.Length} entries loaded from the server.");
                    }
                    else
                    {
                        LogAction("❌ Server returned invalid data.");
                        response?.Errors?.ForEach(e => LogAction($"Error: {e}"));
                    }
                }
                catch (Exception ex)
                {
                    LogAction($"❌ Server fetch error: {ex.Message}");
                    errorMessage = $"Server fetch error: {ex.Message}";
                }
            }
            else
            {
                var response = await SQLiteService.GetAllEntriesAsync();
                var source = response != null ? response.ToList() : new List<Ordbog>();
                var allEntries = _mapper.Map<List<OrdbogDTO>>(source);
                filteredWords = allEntries.Where(e => showDeleted || !e.IsDeleted).ToArray();
                LogAction($"{filteredWords.Length} entries loaded from local DB.");
            }
            await InvokeAsync(StateHasChanged); // Use InvokeAsync for Blazor-specific updates
        }
        catch (Exception ex)
        {
            LogAction($"❌ Loading error: {ex.Message}");
            errorMessage = $"Error loading entries: {ex.Message}";
        }
    }

    private async Task TrySyncIfOnline()
    {
        if (!internet)
        {
            syncFailed = true;
            LogAction("❌ Cannot sync: No internet.");
            return;
        }

        LogAction("🔁 Attempting sync...");
        isSyncing = true;

        try
        {
            await OrdbogSyncService.SyncDataAsync();
            syncFailed = false;
            LogAction("✅ Data synced.");
        }
        catch (Exception ex)
        {
            syncFailed = true;
            LogAction($"❌ Sync failed: {ex.Message}");
        }

        isSyncing = false;
    }

    // ========== CRUD ==========
    private async Task CreateEntry()
    {
        try
        {
            Ordbog entry = _mapper.Map<Ordbog>(entryModel);
            entry.ETag = GenerateETag(entry);
            try
            {
                brugerToken = JwtParser.GetBruger(token);

            }
            catch
            {
                Console.WriteLine("no token");
            }
            if(brugerToken != null)
            {
                entry.ModifiedBy = JwtParser.GetBruger(token);
            }
            else
            {
                entry.ModifiedBy = "system";

            }
            if (internet)
            {
                var response = await _apiClient.PostAsJsonAsync("api/ordbog", entry);

                if (response.IsSuccessStatusCode)
                {
                    LogAction("✅ Entry created on server.");
                    await LoadEntries();
                    await SQLiteService.MarkAsSyncedAsync(entryModel.OrdbogId);
                }
                else
                {
                    var details = await response.Content.ReadAsStringAsync();
                    LogAction($"❌ Server create failed: {details}");
                    errorMessage = $"Server error: {details}";
                }
            }
            else
            {
                await SQLiteService.AddEntryAsync(entry);
                LogAction("✅ Entry created locally.");
                await LoadEntries();
            }

            await TrySyncIfOnline();
        }
        catch (Exception ex)
        {
            errorMessage = $"Create error: {ex.Message}";
            LogAction(errorMessage);
        }
    }

    private async Task UpdateEntry(Ordbog entry)
    {
        try
        {
            try
            {
                brugerToken = JwtParser.GetBruger(token);

            }
            catch
            {
                Console.WriteLine("no token");
            }
            if (brugerToken != null)
            {
                entry.ModifiedBy = JwtParser.GetBruger(token);
            }
            else
            {
                entry.ModifiedBy = "system";

            }
            if (internet)
            {
                var response = await _apiClient.PutAsJsonAsync($"api/ordbog/including-deleted/{entry.OrdbogId}", entry);
                if (response.IsSuccessStatusCode)
                {
                    LogAction("✅ Entry updated on server.");
                    await LoadEntries();
                    await SQLiteService.MarkAsSyncedAsync(entry.OrdbogId);
                }
                else
                {
                    var details = await response.Content.ReadAsStringAsync();
                    LogAction($"❌ Update failed: {details}");
                    errorMessage = $"Update failed: {details}";
                }
            }
            else
            {
                await SQLiteService.UpdateEntryAsync(entry);
                LogAction("✅ Entry updated locally.");
                await LoadEntries();
            }

            await TrySyncIfOnline();
        }
        catch (Exception ex)
        {
            errorMessage = $"Update error: {ex.Message}";
            LogAction(errorMessage);
        }
    }

    private async Task DeleteEntry(Guid ordbogId)
    {
        try
        {
            if (internet)
            {
                var word = filteredWords.FirstOrDefault(w => w.OrdbogId == ordbogId);
                if (word != null)
                {
                    word.IsDeleted = true;
                    word.Status = SyncStatus.Deleted;

                    var response = await _apiClient.PutAsJsonAsync($"api/ordbog/including-deleted/{word.OrdbogId}", word);

                    if (response.IsSuccessStatusCode)
                    {
                        LogAction("✅ Entry deleted on server.");
                    }
                    else
                    {
                        var details = await response.Content.ReadAsStringAsync();
                        LogAction($"❌ Server delete failed: {details}");
                    }
                }
            }

            await SQLiteService.MarkAsDeletedAsync(ordbogId);
            LogAction("✅ Entry deleted locally.");
            await LoadEntries();
        }
        catch (Exception ex)
        {
            errorMessage = $"Delete error: {ex.Message}";
            LogAction(errorMessage);
        }
    }

    private async Task RestoreEntry(Guid ordbogId)
    {
        try
        {
            var word = filteredWords.FirstOrDefault(w => w.OrdbogId == ordbogId);
            if (word != null)
            {
                word.IsDeleted = false;
                word.Status = SyncStatus.Synced;

                if (internet)
                {
                    var response = await _apiClient.PutAsJsonAsync($"api/ordbog/restore/{word.OrdbogId}", word);
                    if (response.IsSuccessStatusCode)
                        LogAction("✅ Restored on server.");
                    else
                        LogAction($"❌ Restore failed: {response.ReasonPhrase}");
                }

                await SQLiteService.MarkAsRestoredAsync(ordbogId);
                LogAction("✅ Restored locally.");
                await LoadEntries();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Restore error: {ex.Message}";
            LogAction(errorMessage);
        }
    }

    // ========== UI Interaction ==========
    private Task EditEntry(OrdbogDTO entry)
    {
        entryModel = entry;
        isEditing = true;
        LogAction($"✏️ Editing: {entry.OrdbogId}");
        return Task.CompletedTask;
    }

    private void CancelEdit()
    {
        entryModel = new();
        isEditing = false;
        LogAction("✋ Edit cancelled.");
    }

    private async Task HandleSubmit()
    {
        Ordbog entry = _mapper.Map<Ordbog>(entryModel);
        if (isEditing)
            await UpdateEntry(entry);
        else
            await CreateEntry();
    }

    private async Task ToggleInternet()
    {
        internet = !internet;
        LogAction($"🌐 Internet {(internet ? "enabled" : "disabled")}.");
        await LoadEntries();
    }

    private async Task ApplyFilter()
    {
        if (!string.IsNullOrEmpty(searchTerm))
        {
            LogAction($"🔍 Filtering for: {searchTerm}");

            filteredWords = filteredWords
                .Where(w =>
                    (!string.IsNullOrEmpty(w.DanskOrd) && w.DanskOrd.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                    (!string.IsNullOrEmpty(w.KoranskOrd) && w.KoranskOrd.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
                .ToArray();

            LogAction($"{filteredWords.Length} match found.");
        }
        else
        {
            LogAction("Filter cleared.");
            await LoadEntries();
        }
    }

    private async void ClearSearch()
    {
        searchTerm = string.Empty;
        LogAction("🔄 Search cleared.");
        await LoadEntries();
    }

    // ========== Helpers ==========
    private string GenerateETag(Ordbog entry)
    {
        // Combine all relevant properties to generate a unique ETag
        var etagSource = $"{entry.OrdbogId}-{entry.DanskOrd}-{entry.KoranskOrd}-{entry.Beskrivelse}-{entry.BilledeLink}-{entry.LydLink}-{entry.VideoLink}";

        // Return a hash of the combined properties to generate the ETag
        return Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(etagSource));
    }

    private void LogAction(string message)
    {
        if (logs.Count > 50)
            logs.RemoveAt(logs.Count - 1);
        logs.Insert(0, $"{DateTime.Now:HH:mm:ss}: {message}");
    }
}
