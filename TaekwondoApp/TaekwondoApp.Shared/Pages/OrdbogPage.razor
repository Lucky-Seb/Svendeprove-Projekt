@page "/ordbog"

@* --- Using Statements --- *@
@using AutoMapper
@using Microsoft.AspNetCore.SignalR.Client
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Helper
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.ServiceInterfaces
@using TaekwondoApp.Shared.Services

@* --- Dependency Injection --- *@

@inject NavigationManager NavigationManager
@inject IMapper _mapper
@inject IHttpClientFactory HttpClientFactory
@inject IAuthStateProvider AuthStateProvider
@inject IAuthenticationService AuthenticationService
@inject SignalRService SignalRService
@implements IAsyncDisposable

<h1>Ordbog</h1>

@if (!isBrowser)
{
    <div class="alert @(internet ? "alert-success" : "alert-warning")">
        Status: @(internet ? "Online - Ændringer synkroniseres automatisk." : "Offline - Ændringer gemmes lokalt og vil blive synkroniseret, når du er online igen.")
    </div>

    @if (syncFailed)
    {
        <div class="alert alert-danger d-flex justify-content-between align-items-center">
            <span>Sidste synkroniseringsforsøg mislykkedes.</span>
            <button class="btn btn-sm btn-danger" @onclick="TrySyncIfOnline">Prøv igen</button>
        </div>
    }
    @if (isSyncing is true)
    {
        <div class="d-flex align-items-center mb-3">
            <div class="spinner-border text-primary me-2" role="status">
                <span class="visually-hidden">Synkroniserer...</span>
            </div>
            <span>Synkroniserer lokale ændringer...</span>
        </div>
    }

    <div class="mb-3">
        <button class="btn @(internet ? "btn-outline-danger" : "btn-outline-success")" @onclick="ToggleInternet">
            @(internet ? "Gå offline (simuleret)" : "Gå online (simuleret)")
        </button>
    </div>

    <div class="form-check mb-3">
        <InputCheckbox class="form-check-input" @bind-Value="showDeleted" />
        <label class="form-check-label">Vis slettede opslag</label>
    </div>
}

<div class="mb-3 row">
    <div class="col-md-4">
        <label>Søg (Dansk/Koransk):</label>
        <InputText class="form-control" @bind-Value="searchTerm" />
    </div>
    <div class="col-md-4 d-flex align-items-end">
        <button class="btn btn-primary me-2" @onclick="ApplyFilter">Søg</button>
        <button class="btn btn-secondary" @onclick="ClearSearch">Ryd</button>
    </div>
</div>

<div class="log-box" style="max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; margin-top: 20px;">
    <h4>App-log</h4>
    @foreach (var log in logs.Reverse<string>())
    {
        <div>@log</div>
    }
</div>

@if (filteredWords == null || !filteredWords.Any())
{
    <p><em>Indlæser opslag...</em></p>
}
else if (!filteredWords.Any())
{
    <p><em>Ingen matchende opslag fundet.</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Dansk</th>
                <th>Koransk</th>
                <th>Beskrivelse</th>
                <th>Billede</th>
                <th>Lyd</th>
                <th>Video</th>
                <th>Status</th>
                <th>Konflikt</th>
                <th>Ændret af</th>
                <th>Sidst ændret</th>
                <th>Oprettet</th>
                <th>ETag</th>
                <th>Slettet</th>
                <th>Handlinger</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var word in filteredWords)
            {
                <tr>
                    <td>@word.OrdbogId</td>
                    <td>@word.DanskOrd</td>
                    <td>@word.KoranskOrd</td>
                    <td>@word.Beskrivelse</td>
                    <td><a href="@word.BilledeLink" target="_blank">Billede</a></td>
                    <td><a href="@word.LydLink" target="_blank">Lyd</a></td>
                    <td><a href="@word.VideoLink" target="_blank">Video</a></td>
                    <td>@word.Status</td>
                    <td>@word.ConflictStatus</td>
                    <td>@word.ModifiedBy</td>
                    <td>@word.LastModified.ToString("g")</td>
                    <td>@word.CreatedAt.ToString("g")</td>
                    <td>@word.ETag</td>
                    <td>@(word.IsDeleted ? "Ja" : "Nej")</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => EditEntry(word)">Rediger</button>
                        @if (!word.IsDeleted)
                        {
                            <button class="btn btn-sm btn-danger ms-1" @onclick="() => DeleteEntry(word.OrdbogId)">Slet</button>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-success ms-1" @onclick="() => RestoreEntry(word.OrdbogId)">Gendan</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<h3>@(isEditing ? "Rediger opslag" : "Tilføj nyt opslag")</h3>

<EditForm Model="entryModel" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-2">
        <label>Dansk ord:</label>
        <InputText class="form-control" @bind-Value="entryModel.DanskOrd" required />
    </div>

    <div class="form-group mb-2">
        <label>Koransk ord:</label>
        <InputText class="form-control" @bind-Value="entryModel.KoranskOrd" required />
    </div>

    <div class="form-group mb-2">
        <label>Beskrivelse:</label>
        <InputTextArea class="form-control" @bind-Value="entryModel.Beskrivelse" />
    </div>

    <div class="form-group mb-2">
        <label>Billedlink:</label>
        <InputText class="form-control" @bind-Value="entryModel.BilledeLink" />
    </div>

    <div class="form-group mb-2">
        <label>Lydlink:</label>
        <InputText class="form-control" @bind-Value="entryModel.LydLink" />
    </div>

    <div class="form-group mb-2">
        <label>Videolink:</label>
        <InputText class="form-control" @bind-Value="entryModel.VideoLink" />
    </div>

    <button type="submit" class="btn btn-success">@((isEditing ? "Opdater" : "Opret"))</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Annuller</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}


@code {
    // ========== DI ==========

#if ANDROID || IOS || WINDOWS
    [Inject] private IOrdbogSyncService OrdbogSyncService { get; set; } = default!;
    [Inject] private ISQLiteService SQLiteService { get; set; } = default!;
#endif

    // ========== Felter og tilstand ==========
    private OrdbogDTO[] filteredWords = Array.Empty<OrdbogDTO>();
    private List<string> logs = new();
    private OrdbogDTO entryModel = new();
    private bool isEditing = false;
    private bool isSyncing = false;
    private bool syncFailed = false;
    private bool internet = true;
    private bool isAuthenticated;
    private string? role;
    private string searchTerm = string.Empty;
    private string errorMessage = string.Empty;
    private bool showDeleted = false;
    private string token = "";
    private string brugerToken = "";
    private HttpClient _apiClient;
    private HubConnection _hubConnection;
    private bool isBrowser = true;

    // ========== Livscyklus ==========
    protected override async Task OnInitializedAsync()
    {
            #if ANDROID || IOS || WINDOWS
            isBrowser = false;

            #endif
        LogAction($"{isBrowser}");
        
        AuthStateProvider.OnChange += StateChanged;
        StateChanged();
        try
        {
            token = await AuthenticationService.GetTokenAsync();
        }
        catch (Exception ex)
        {
            LogAction($"❌ Ingen autentificeringsnøgle: {ex.Message}");
            errorMessage = $"Kunne ikke hente token: {ex.Message}\n{ex.StackTrace}";
        }

        try
        {
            _apiClient = HttpClientFactory.CreateClient("ApiClient");
            LogAction("App initialiseres...");

            if (internet)
            {
                LogAction("Forbindelse til internettet. Forsøger at synkronisere...");
                try
                {
                    await TrySyncIfOnline();
                    LogAction("✅ Synkroniseret fra server til lokal.");
                }
                catch (Exception ex)
                {
                    LogAction("❌ Fejl under synkronisering: " + ex.Message);
                }
            }

            await SignalRService.StartConnectionAsync();
            Console.WriteLine("✅ SignalR-forbindelse etableret.");
            await LoadEntries();
            LogAction("✅ Ord indlæst.");
        }
        catch (Exception ex)
        {
            LogAction($"❌ Fejl ved initialisering: {ex.Message}");
            errorMessage = $"Fejl under initialisering: {ex.Message}\n{ex.StackTrace}";
        }

        SignalRService.HubConnection.On("OrdbogUpdated", async () =>
        {
            Console.WriteLine("🔄 Ordbog-opdatering modtaget. Genindlæser...");
            await LoadEntries();
        });
    }

    public async ValueTask DisposeAsync()
    {
        AuthStateProvider.OnChange -= StateChanged;
        SignalRService.HubConnection.Remove("OrdbogUpdated");
        await SignalRService.StopConnectionAsync();
    }

    private void StateChanged()
    {
        isAuthenticated = AuthStateProvider.IsAuthenticated;
        role = AuthStateProvider.Role;
        InvokeAsync(StateHasChanged);
    }

    // ========== Dataindlæsning ==========
    private async Task LoadEntries()
    {
        try
        {
            if (internet)
            {
                await TrySyncIfOnline();
                LogAction("Indlæser ord fra serveren...");

                try
                {
                    using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
                    var response = await _apiClient.GetFromJsonAsync<ApiResponse<List<Ordbog>>>("api/ordbog/including-deleted", cts.Token);

                    if (response?.Success == true)
                    {
                        var allEntries = _mapper.Map<List<OrdbogDTO>>(response.Data);
                        filteredWords = allEntries.Where(e => showDeleted || !e.IsDeleted).ToArray();
                        LogAction($"{filteredWords.Length} ord indlæst fra serveren.");
                    }
                    else
                    {
                        LogAction("❌ Serveren returnerede ugyldige data.");
                        response?.Errors?.ForEach(e => LogAction($"Fejl: {e}"));
                    }
                }
                catch (Exception ex)
                {
                    LogAction($"❌ Fejl ved hentning fra server: {ex.Message}");
                    errorMessage = $"Fejl ved serverforespørgsel: {ex.Message}";
                }
            }
            else if (!isBrowser)
            {
                            #if ANDROID || IOS || WINDOWS
                var response = await SQLiteService.GetAllEntriesAsync();
                var source = response?.ToList() ?? new List<Ordbog>();
                var allEntries = _mapper.Map<List<OrdbogDTO>>(source);
                filteredWords = allEntries.Where(e => showDeleted || !e.IsDeleted).ToArray();
                LogAction($"{filteredWords.Length} ord indlæst fra lokal database.");
                #endif
            }
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            LogAction($"❌ Fejl under indlæsning: {ex.Message}");
            errorMessage = $"Indlæsningsfejl: {ex.Message}";
        }
    }

    private async Task TrySyncIfOnline()
    {
        if (!internet || isBrowser)
        {
            syncFailed = true;
            LogAction("❌ Kan ikke synkronisere: Ingen internetforbindelse.");
            return;
        }

        LogAction("🔁 Forsøger at synkronisere...");
        isSyncing = true;

        try
        {
            #if ANDROID || IOS || WINDOWS
            await OrdbogSyncService.SyncDataAsync();
            #endif

            syncFailed = false;
            LogAction("✅ Data synkroniseret.");
        }
        catch (Exception ex)
        {
            syncFailed = true;
            LogAction($"❌ Synkronisering fejlede: {ex.Message}");
        }

        isSyncing = false;
    }

    // ========== CRUD ==========
    private async Task CreateEntry()
    {
        try
        {
            Ordbog entry = _mapper.Map<Ordbog>(entryModel);
            entry.ETag = GenerateETag(entry);

            try { brugerToken = JwtParser.GetBruger(token); } catch { }

            entry.ModifiedBy = brugerToken ?? "system";

            if (internet)
            {
                var response = await _apiClient.PostAsJsonAsync("api/ordbog", entry);

                if (response.IsSuccessStatusCode)
                {
                    LogAction("✅ Ord oprettet på server.");
                    await LoadEntries();
                #if ANDROID || IOS || WINDOWS
                    await SQLiteService.MarkAsSyncedAsync(entryModel.OrdbogId);
                #endif
                }
                else
                {
                    var details = await response.Content.ReadAsStringAsync();
                    LogAction($"❌ Serverfejl ved oprettelse: {details}");
                    errorMessage = $"Serverfejl: {details}";
                }
            }
            else if (!isBrowser)
            {
                #if ANDROID || IOS || WINDOWS
                await SQLiteService.AddEntryAsync(entry);
                #endif
                LogAction("✅ Ord oprettet lokalt.");
                await LoadEntries();
            }

            await TrySyncIfOnline();
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved oprettelse: {ex.Message}";
            LogAction(errorMessage);
        }
    }

    private async Task UpdateEntry(Ordbog entry)
    {
        try
        {
            try { brugerToken = JwtParser.GetBruger(token); } catch { }

            entry.ModifiedBy = brugerToken ?? "system";

            if (internet)
            {
                var response = await _apiClient.PutAsJsonAsync($"api/ordbog/including-deleted/{entry.OrdbogId}", entry);
                if (response.IsSuccessStatusCode)
                {
                    LogAction("✅ Ord opdateret på server.");
                    await LoadEntries();
                                                #if ANDROID || IOS || WINDOWS
                        await SQLiteService.MarkAsSyncedAsync(entryModel.OrdbogId);

                #endif
                }
                else
                {
                    var details = await response.Content.ReadAsStringAsync();
                    LogAction($"❌ Opdatering fejlede: {details}");
                    errorMessage = $"Opdatering mislykkedes: {details}";
                }
            }
            else if (!isBrowser)
            {
                                                                #if ANDROID || IOS || WINDOWS
                await SQLiteService.UpdateEntryAsync(entry);

                #endif
                LogAction("✅ Ord opdateret lokalt.");
                await LoadEntries();
            }

            await TrySyncIfOnline();
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved opdatering: {ex.Message}";
            LogAction(errorMessage);
        }
    }

    private async Task DeleteEntry(Guid ordbogId)
    {
        try
        {
            if (internet)
            {
                var word = filteredWords.FirstOrDefault(w => w.OrdbogId == ordbogId);
                if (word != null)
                {
                    word.IsDeleted = true;
                    word.Status = SyncStatus.Deleted;

                    var response = await _apiClient.PutAsJsonAsync($"api/ordbog/including-deleted/{word.OrdbogId}", word);

                    if (response.IsSuccessStatusCode)
                        LogAction("✅ Ord slettet på server.");
                    else
                    {
                        var details = await response.Content.ReadAsStringAsync();
                        LogAction($"❌ Serverfejl ved sletning: {details}");
                    }
                }
            }

            if (!isBrowser)
            {
                                                                                #if ANDROID || IOS || WINDOWS
                await SQLiteService.MarkAsDeletedAsync(ordbogId);

                #endif
                LogAction("✅ Ord slettet lokalt.");
            }
            await LoadEntries();
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved sletning: {ex.Message}";
            LogAction(errorMessage);
        }
    }

    private async Task RestoreEntry(Guid ordbogId)
    {
        try
        {
            var word = filteredWords.FirstOrDefault(w => w.OrdbogId == ordbogId);
            if (word != null)
            {
                word.IsDeleted = false;
                word.Status = SyncStatus.Synced;

                if (internet)
                {
                    var response = await _apiClient.PutAsJsonAsync($"api/ordbog/restore/{word.OrdbogId}", word);
                    if (response.IsSuccessStatusCode)
                        LogAction("✅ Ord gendannet på server.");
                    else
                        LogAction($"❌ Gendannelse fejlede: {response.ReasonPhrase}");
                }
                if (!isBrowser)
                {
                                                                                                    #if ANDROID || IOS || WINDOWS
                    await SQLiteService.MarkAsRestoredAsync(ordbogId);

                #endif
                    LogAction("✅ Ord gendannet lokalt.");
                }
                await LoadEntries();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved gendannelse: {ex.Message}";
            LogAction(errorMessage);
        }
    }

    // ========== UI Interaktion ==========
    private Task EditEntry(OrdbogDTO entry)
    {
        entryModel = entry;
        isEditing = true;
        LogAction($"✏️ Redigerer: {entry.OrdbogId}");
        return Task.CompletedTask;
    }

    private void CancelEdit()
    {
        entryModel = new();
        isEditing = false;
        LogAction("✋ Redigering annulleret.");
    }

    private async Task HandleSubmit()
    {
        Ordbog entry = _mapper.Map<Ordbog>(entryModel);
        if (isEditing)
            await UpdateEntry(entry);
        else
            await CreateEntry();
    }

    private async Task ToggleInternet()
    {
        internet = !internet;
        if (internet)
        {
            await TrySyncIfOnline();
            LogAction("🔄 Går online...");
        }
        else
        {
            LogAction("🔄 Går offline...");
        }
        LogAction($"🌐 Internet er nu {(internet ? "aktiveret" : "deaktiveret")}.");
        await LoadEntries();
    }

    private async Task ApplyFilter()
    {
        if (!string.IsNullOrEmpty(searchTerm))
        {
            LogAction($"🔍 Søger efter: {searchTerm}");

            filteredWords = filteredWords
                .Where(w =>
                    (!string.IsNullOrEmpty(w.DanskOrd) && w.DanskOrd.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                    (!string.IsNullOrEmpty(w.KoranskOrd) && w.KoranskOrd.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
                .ToArray();

            LogAction($"{filteredWords.Length} fundet.");
        }
        else
        {
            LogAction("Filtrering ryddet.");
            await LoadEntries();
        }
    }

    private async void ClearSearch()
    {
        searchTerm = string.Empty;
        LogAction("🔄 Søgning ryddet.");
        await LoadEntries();
    }

    // ========== Hjælpefunktion ==========
    private string GenerateETag(Ordbog entry)
    {
        var etagSource = $"{entry.OrdbogId}-{entry.DanskOrd}-{entry.KoranskOrd}-{entry.Beskrivelse}-{entry.BilledeLink}-{entry.LydLink}-{entry.VideoLink}";
        return Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(etagSource));
    }

    private void LogAction(string message)
    {
        if (logs.Count > 50)
            logs.RemoveAt(logs.Count - 1);
        logs.Insert(0, $"{DateTime.Now:HH:mm:ss}: {message}");
    }
}
