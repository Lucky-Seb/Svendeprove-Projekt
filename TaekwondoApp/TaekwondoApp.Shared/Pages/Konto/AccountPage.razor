@page "/account"

@* --- Brugte navneområder --- *@
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.Services
@using TaekwondoApp.Shared.Helper
@using AutoMapper
@using Microsoft.AspNetCore.SignalR.Client

@* --- Afhængighedsinjektion --- *@
@inject NavigationManager NavigationManager
@inject IMapper _mapper
@inject IHttpClientFactory HttpClientFactory
@inject AuthStateProvider AuthStateProvider
@inject IAuthenticationService AuthenticationService

<h1>Brugerprofil</h1>

@if (!isAuthenticated)
{
    <p>Du er ikke logget ind. Log ind først.</p>
    <button @onclick="NavigateToLogin">Gå til login</button>
}
else
{
    <div class="account-details">
        @if (isEditing)
        {
            <h3>Rediger din profil</h3>
            <EditForm Model="brugerDTO" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div>
                    <label for="brugernavn">Brugernavn:</label>
                    <InputText id="brugernavn" @bind-Value="brugerDTO.Brugernavn" />
                </div>

                <div>
                    <label for="fornavn">Fornavn:</label>
                    <InputText id="fornavn" @bind-Value="brugerDTO.Fornavn" />
                </div>

                <div>
                    <label for="efternavn">Efternavn:</label>
                    <InputText id="efternavn" @bind-Value="brugerDTO.Efternavn" />
                </div>

                <div>
                    <label for="email">Email:</label>
                    <InputText id="email" @bind-Value="brugerDTO.Email" />
                </div>

                <div>
                    <label for="address">Adresse:</label>
                    <InputText id="address" @bind-Value="brugerDTO.Address" />
                </div>

                <div>
                    <label for="bæltegrad">Bæltegrad:</label>
                    <InputText id="bæltegrad" @bind-Value="brugerDTO.Bæltegrad" />
                </div>

                <div class="actions">
                    <button type="submit">Gem</button>
                    <button type="button" @onclick="CancelEdit">Annuller</button>
                </div>
            </EditForm>
        }
        else
        {
            <h3>Din Profil</h3>
            <p><strong>Brugernavn:</strong> @brugerDTO.Brugernavn</p>
            <p><strong>Fornavn:</strong> @brugerDTO.Fornavn</p>
            <p><strong>Efternavn:</strong> @brugerDTO.Efternavn</p>
            <p><strong>Email:</strong> @brugerDTO.Email</p>
            <p><strong>Adresse:</strong> @brugerDTO.Address</p>
            <p><strong>Bæltegrad:</strong> @brugerDTO.Bæltegrad</p>

            <h4>Øvelser:</h4>
            @if (brugerDTO.Øvelser?.Any() == true)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Navn</th>
                            <th>Sværhedsgrad</th>
                            <th>Varighed</th>
                            <th>Handlinger</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var øvelse in brugerDTO.Øvelser)
                        {
                            <tr>
                                <td>@øvelse.ØvelseNavn</td>
                                <td>@øvelse.ØvelseSværhed</td>
                                <td>@øvelse.ØvelseTid sek</td>
                                <td>
                                    <button class="btn btn-sm btn-primary" @onclick="() => EditExercise(øvelse.ØvelseID)">Rediger</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => PromptDelete(øvelse.ØvelseID)">Slet</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>Ingen øvelser tilgængelige.</p>
            }

            <button class="btn btn-primary" @onclick="NavigateToCreateExercise">Opret ny øvelse</button>

            <hr>

            <h4>Klubber:</h4>

            @if (brugerDTO.Klubber?.Any() == true)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Klubnavn</th>
                            <th>Handlinger</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var klub in brugerDTO.Klubber)
                        {
                            var role = brugerDTO.BrugerKlubber.FirstOrDefault(r => r.KlubID == klub.KlubID)?.KlubRole;
                            <tr>
                                <td>@klub.KlubNavn</td>
                                <td>
                                    @if (role == "Admin")
                                    {
                                        <button @onclick="() => NavigateToKlubAdminPage(klub.KlubID)">Gå til Klub Admin</button>
                                    }
                                    <button @onclick="() => LeaveClub(klub.KlubID)">Forlad Klub</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>Ingen klubber tilgængelige.</p>
            }

            <h4>Slut dig til en klub:</h4>

            @if (availableKlubs?.Any() == true)
            {
                <div>
                    <label for="clubDropdown">Vælg en klub at slutte dig til:</label>
                    <select id="clubDropdown" @bind="selectedClubId">
                        <option value="">-- Vælg Klub --</option>
                        @foreach (var klub in availableKlubs)
                        {
                            <option value="@klub.KlubID">@klub.KlubNavn</option>
                        }
                    </select>

                    <label for="roleDropdown">Vælg rolle:</label>
                    <select id="roleDropdown" @bind="selectedRole">
                        <option value="">-- Vælg Rolle --</option>
                        <option value="Member">Medlem</option>
                        <option value="Admin">Admin</option>
                    </select>

                    <button class="btn btn-primary" @onclick="JoinClub">Slut dig til Klub</button>
                </div>
            }
            else
            {
                <p>Ingen klubber tilgængelige at slutte sig til.</p>
            }

            <h4>Programmer:</h4>
            @if (brugerDTO.Programmer?.Any() == true)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Programnavn</th>
                            <th>Handlinger</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var program in brugerDTO.Programmer)
                        {
                            <tr>
                                <td>@program.ProgramNavn</td>
                                <td>
                                    <button class="btn btn-sm btn-primary" @onclick="() => EditProgram(program.ProgramID)">Rediger</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => PromptDeleteProgram(program.ProgramID)">Slet</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>Ingen programmer tilgængelige.</p>
            }

            <button class="btn btn-primary" @onclick="NavigateToCreateProgram">Opret nyt program</button>

            <hr>

            <h4>Quizzer:</h4>
            @if (brugerDTO.Quizzer?.Any() == true)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Quiznavn</th>
                            <th>Handlinger</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var quiz in brugerDTO.Quizzer)
                        {
                            <tr>
                                <td>@quiz.QuizNavn</td>
                                <td>
                                    <button class="btn btn-sm btn-primary" @onclick="() => EditQuiz(quiz.QuizID)">Rediger</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => PromptDeleteQuiz(quiz.QuizID)">Slet</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>Ingen quizzer tilgængelige.</p>
            }

            <button class="btn btn-primary" @onclick="NavigateToCreateQuiz">Opret ny quiz</button>

            <hr>
        }
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            <p>@errorMessage</p>
        </div>
    }

}

@code {
    private BrugerDTO brugerDTO = null;
    private BrugerKlubDTO BrugerklubDTO = new();
    private KlubDTO KlubDTO = new();
    private QuizDTO QuizDTO = null;
    private bool isEditing = false;
    private bool isAuthenticated;
    private string errorMessage = string.Empty;
    private string token = "";
    private Guid brugerId = new Guid();
    private HttpClient _apiClient;
    private HubConnection _hubConnection;
    private List<KlubDTO> availableKlubs = new List<KlubDTO>();
    private Guid selectedClubId;
    private string selectedRole = "Member"; // Default role is Member

    protected override async Task OnInitializedAsync()
    {
        try
        {
            token = await AuthenticationService.GetTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }
            brugerId = JwtParser.GetUserIdFromJwt(token);

            isAuthenticated = true;
            _apiClient = HttpClientFactory.CreateClient("ApiClient");

            await LoadBruger();
            await LoadKluber();

            _hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7478/brugerhub")
                .WithAutomaticReconnect()
                .Build();

            _hubConnection.On("BrugerUpdated", async () =>
            {
                await LoadBruger();
                await InvokeAsync(StateHasChanged);
            });

            await _hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl under initialisering: {ex.Message}";
        }
    }

    private async Task LoadBruger()
    {
        try
        {
            var response = await _apiClient.GetFromJsonAsync<ApiResponse<BrugerDTO>>($"api/bruger/details/{brugerId}");
            if (response?.Success == true && response.Data != null)
            {
                brugerDTO = response.Data;
                StateHasChanged();
            }
            else
            {
                errorMessage = "Kunne ikke hente brugerdata.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved indlæsning af brugerdata: {ex.Message}";
        }
    }

    private async Task LoadKluber()
    {
        try
        {
            var response = await _apiClient.GetFromJsonAsync<ApiResponse<List<KlubDTO>>>($"api/klub");
            if (response?.Success == true && response.Data != null)
            {
                availableKlubs = _mapper.Map<List<KlubDTO>>(response.Data);
                StateHasChanged(); // Refresh UI
            }
            else
            {
                errorMessage = "Kunne ikke hente klubber.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved indlæsning af klubber: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Send the updated user data to the API for saving
            var response = await _apiClient.PutAsJsonAsync($"api/bruger/update/{brugerId}", brugerDTO);
            if (response.IsSuccessStatusCode)
            {
                // Successfully updated the profile
                isEditing = false;
                await LoadBruger();
            }
            else
            {
                errorMessage = "Kunne ikke opdatere profilen. Prøv igen.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved opdatering af profil: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        // Reset the model to the original values and stop editing.
        isEditing = false;
        // Reload the user data to discard any unsaved changes.
        LoadBruger();
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    // Edit methods
    private void EditExercise(Guid exerciseId)
    {
        NavigationManager.NavigateTo($"/øvelse/update/{exerciseId}");
    }

    private void EditProgram(Guid programId)
    {
        NavigationManager.NavigateTo($"/programplan/update/{programId}");
    }

    private void EditQuiz(Guid quizId)
    {
        NavigationManager.NavigateTo($"/quiz/update/{quizId}");
    }

    // Prompt delete methods
    private void PromptDelete(Guid exerciseId)
    {
        bool userConfirmed = true; // This should be your actual confirmation logic
        if (userConfirmed)
        {
            DeleteExercise(exerciseId);
        }
    }

    private async Task DeleteExercise(Guid exerciseId)
    {
        try
        {
            var response = await _apiClient.DeleteAsync($"api/øvelse/{exerciseId}");
            if (response.IsSuccessStatusCode)
            {
                var exerciseToRemove = brugerDTO.Øvelser.FirstOrDefault(e => e.ØvelseID == exerciseId);
                if (exerciseToRemove != null)
                {
                    await _apiClient.DeleteAsync($"api/øvelse/{exerciseId}");
                }
            }
            else
            {
                errorMessage = "Kunne ikke slette øvelsen. Prøv igen.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved sletning af øvelse: {ex.Message}";
        }
    }

    private void NavigateToCreateExercise()
    {
        NavigationManager.NavigateTo("/øvelse/create");
    }

    private void PromptDeleteProgram(Guid programId)
    {
        bool userConfirmed = true; // This should be your actual confirmation logic
        if (userConfirmed)
        {
            DeleteProgram(programId);
        }
    }

    private async Task DeleteProgram(Guid programId)
    {
        try
        {
            var response = await _apiClient.DeleteAsync($"api/program/{programId}");
            if (response.IsSuccessStatusCode)
            {
                var programToRemove = brugerDTO.Programmer.FirstOrDefault(p => p.ProgramID == programId);
                if (programToRemove != null)
                {
                    await LoadBruger();
                }
            }
            else
            {
                errorMessage = "Kunne ikke slette programmet. Prøv igen.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved sletning af program: {ex.Message}";
        }
    }

    private void NavigateToCreateProgram()
    {
        NavigationManager.NavigateTo("/program/create");
    }

    private void PromptDeleteQuiz(Guid quizId)
    {
        bool userConfirmed = true; // This should be your actual confirmation logic
        if (userConfirmed)
        {
            DeleteQuiz(quizId);
        }
    }

    private async Task DeleteQuiz(Guid quizId)
    {
        try
        {
            var response = await _apiClient.DeleteAsync($"api/quiz/{quizId}");
            if (response.IsSuccessStatusCode)
            {
                var quizToRemove = brugerDTO.Quizzer.FirstOrDefault(q => q.QuizID == quizId);
                if (quizToRemove != null)
                {
                    await LoadBruger();
                }
            }
            else
            {
                errorMessage = "Kunne ikke slette quizzen. Prøv igen.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved sletning af quiz: {ex.Message}";
        }
    }

    private void NavigateToCreateQuiz()
    {
        NavigationManager.NavigateTo("/quiz/create");
    }

    private void NavigateToKlubAdminPage(Guid klubId)
    {
        NavigationManager.NavigateTo($"/klub/admin/{klubId}");
    }

    private async Task JoinClub()
    {
        if (selectedClubId != Guid.Empty)
        {
            try
            {
                var response = await _apiClient.PostAsJsonAsync("api/klub/join", new { ClubId = selectedClubId, Role = selectedRole });
                if (response.IsSuccessStatusCode)
                {
                    await LoadBruger(); // Reload user data
                }
                else
                {
                    errorMessage = "Kunne ikke tilslutte klubben. Prøv igen.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Fejl ved tilslutning af klub: {ex.Message}";
            }
        }
    }

    private async Task LeaveClub(Guid clubId)
    {
        try
        {
            var response = await _apiClient.PostAsJsonAsync($"api/klub/leave/{clubId}", new { ClubId = clubId });
            if (response.IsSuccessStatusCode)
            {
                await LoadBruger();
            }
            else
            {
                errorMessage = "Kunne ikke forlade klubben. Prøv igen.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved forladelse af klub: {ex.Message}";
        }
    }
}
