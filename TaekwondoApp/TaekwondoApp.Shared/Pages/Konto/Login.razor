@page "/login"
@using Microsoft.AspNetCore.Components.Forms
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Services
@using TaekwondoApp.Shared.Helper
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IAuthenticationService AuthenticationService

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="emailOrUsername">Email eller Brugernavn:</label>
        <InputText id="emailOrUsername" @bind-Value="loginModel.EmailOrBrugernavn" class="form-control" />
        <small class="form-text text-muted">Indtast din registrerede email eller brugernavn.</small>
    </div>

    <div>
        <label for="password">Adgangskode:</label>
        <InputText id="password" type="password" @bind-Value="loginModel.Brugerkode" class="form-control" />
        <small class="form-text text-muted">Indtast din adgangskode.</small>
    </div>

    <button type="submit" class="btn btn-primary mt-2">Login</button>
</EditForm>

@if (validationErrors.Any())
{
    <div class="alert alert-danger mt-3">
        <ul>
            @foreach (var error in validationErrors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<!-- App Logs -->
<div class="log-box mt-4" style="max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
    <h5>App Logs</h5>
    <button class="btn btn-sm btn-secondary mb-2" @onclick="() => logs.Clear()">Ryd Logs</button>
    @foreach (var log in logs)
    {
        <div>@log</div>
    }
</div>

@code {
    private LoginModel loginModel = new();
    private List<string> validationErrors = new();
    private List<string> logs = new();

    private async Task HandleLogin()
    {
        validationErrors.Clear();

        if (string.IsNullOrWhiteSpace(loginModel.EmailOrBrugernavn) || string.IsNullOrWhiteSpace(loginModel.Brugerkode))
        {
            validationErrors.Add("Email/Brugernavn og adgangskode er påkrævet.");
            return;
        }

        try
        {
            LogAction("Forsøger at logge ind med:");
            LogAction($"Email/Brugernavn: {loginModel.EmailOrBrugernavn}");
            LogAction($"Adgangskode sendt: {loginModel.Brugerkode}");

            // Send the login request
            var response = await HttpClient.PostAsJsonAsync("https://localhost:7478/api/bruger/login", loginModel);
            LogAction($"Svar statuskode: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                // Try to deserialize the response
                ApiResponse<LoginResponseDTO>? apiResponse = null;
                try
                {
                    apiResponse = await response.Content.ReadFromJsonAsync<ApiResponse<LoginResponseDTO>>();
                }
                catch (Exception ex)
                {
                    validationErrors.Add($"Fejl ved deserialisering af login svar: {ex.Message}");
                    LogAction($"Fejl ved deserialisering af login svar: {ex.Message}");
                }

                if (apiResponse != null && apiResponse.Success)
                {
                    var loginResponse = apiResponse.Data;

                    if (loginResponse != null && !string.IsNullOrEmpty(loginResponse.Token))
                    {
                        // Store the token using AuthenticationService
                        await AuthenticationService.SetTokenAsync(loginResponse.Token);

                        LogAction("Login succesfuld og token gemt.");
                        // Redirect to the dashboard or home page
                        NavigationManager.NavigateTo("/testpage");
                    }
                    else
                    {
                        validationErrors.Add("Ugyldige loginoplysninger.");
                        LogAction("Ugyldige loginoplysninger.");
                    }
                }
                else
                {
                    validationErrors.Add("Login mislykkedes. " + string.Join(", ", apiResponse?.Errors ?? new List<string>()));
                    LogAction($"Login mislykkedes. Fejl: {string.Join(", ", apiResponse?.Errors ?? new List<string>())}");
                }
            }
            else
            {
                validationErrors.Add("Login mislykkedes.");
                LogAction("Login mislykkedes.");
            }
        }
        catch (Exception ex)
        {
            validationErrors.Add($"Login mislykkedes. Fejl: {ex.Message}");
            LogAction($"Login undtagelse: {ex.Message}");
        }
    }

    private void LogAction(string message)
    {
        if (logs.Count > 50)
        {
            logs.RemoveAt(logs.Count - 1);
        }

        logs.Insert(0, $"{DateTime.Now:HH:mm:ss}: {message}");
    }

    public class LoginModel
    {
        public string EmailOrBrugernavn { get; set; } = string.Empty;
        public string Brugerkode { get; set; } = string.Empty;
    }

    // DTO to map the response from the backend API
    public class LoginResponseDTO
    {
        public string Token { get; set; } = string.Empty;
    }
}
