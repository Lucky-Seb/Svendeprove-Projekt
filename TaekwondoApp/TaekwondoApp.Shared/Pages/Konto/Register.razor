@page "/register"
@using Microsoft.AspNetCore.Components.Forms
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.Mapping
@using AutoMapper
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IMapper Mapper

<h3>Registrering</h3>

<EditForm Model="@registerDTO" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="registerDTO.Email" class="form-control" />
        <small class="form-text text-muted">Indtast en gyldig emailadresse.</small>
    </div>

    <div>
        <label for="brugernavn">Brugernavn:</label>
        <InputText id="brugernavn" @bind-Value="registerDTO.Brugernavn" class="form-control" />
        <small class="form-text text-muted">Mindst 3 tegn. Vil være synligt for andre.</small>
    </div>

    <div>
        <label for="fornavn">Fornavn:</label>
        <InputText id="fornavn" @bind-Value="registerDTO.Fornavn" class="form-control" />
        <small class="form-text text-muted">Indtast dit fornavn.</small>
    </div>

    <div>
        <label for="efternavn">Efternavn:</label>
        <InputText id="efternavn" @bind-Value="registerDTO.Efternavn" class="form-control" />
        <small class="form-text text-muted">Indtast dit efternavn.</small>
    </div>

    <div>
        <label for="password">Adgangskode:</label>
        <InputText id="password" type="password" @bind-Value="registerDTO.Password" class="form-control" @oninput="CheckPasswordStrength" />
        <small class="form-text text-muted">
            Minimum 8 tegn og maksimum 256 tegn.<br />
            Skal indeholde mindst tre af følgende: store bogstaver, små bogstaver, tal og specialtegn.
        </small>
        <div class="mt-1">
            <span style="color:@PasswordStrengthColor">@PasswordStrengthText</span>
        </div>
    </div>

    <div>
        <label for="confirmpassword">Bekærft Adgangskode:</label>
        <InputText id="confirmpassword" type="password" @bind-Value="registerDTO.ConfirmPassword" class="form-control"/>
    </div>

    <div>
        <label for="bæltegrad">Bæltegrad:</label>
        <InputText id="bæltegrad" @bind-Value="registerDTO.Bæltegrad" class="form-control" />
        <small class="form-text text-muted">F.eks. Hvid, Gul, Sort.</small>
    </div>

    <div>
        <label for="address">Adresse:</label>
        <InputText id="address" @bind-Value="registerDTO.Address" class="form-control" />
        <small class="form-text text-muted">Indtast din adresse.</small>
    </div>

    <div>
        <label for="role">Rolle:</label>
        <InputSelect id="role" @bind-Value="registerDTO.Role" class="form-control">
            <option value="">Vælg en rolle</option>
            <option value="Elev">Elev</option>
            <option value="Admin">Admin</option>
            <option value="Instructor">Instruktør</option>
            <option value="Bruger">Bruger</option>
        </InputSelect>
        <small class="form-text text-muted">Vælg din rolle.</small>
    </div>

    <button type="submit" class="btn btn-primary mt-3">Registrer</button>
</EditForm>

@if (validationErrors.Any())
{
    <div class="alert alert-danger mt-3">
        <ul>
            @foreach (var error in validationErrors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<div class="log-box mt-4" style="max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
    <h5>App Logfiler</h5>
    <button class="btn btn-sm btn-secondary mb-2" @onclick="() => logs.Clear()">Ryd logfiler</button>
    @foreach (var log in logs)
    {
        <div>@log</div>
    }
</div>

@code {
    private RegisterDTO registerDTO = new();
    private List<string> validationErrors = new();
    private List<string> logs = new();
    private string PasswordStrengthText = string.Empty;
    private string PasswordStrengthColor = "black";

    private async Task HandleRegister()
    {
        validationErrors.Clear();

        if (string.IsNullOrWhiteSpace(registerDTO.Email) ||
            string.IsNullOrWhiteSpace(registerDTO.Password) ||
            string.IsNullOrWhiteSpace(registerDTO.ConfirmPassword))
        {
            validationErrors.Add("Email, adgangskode og bekræft adgangskode er påkrævet.");
            return;
        }

        if (registerDTO.Password != registerDTO.ConfirmPassword)
        {
            validationErrors.Add("Adgangskoderne stemmer ikke overens.");
            return;
        }

        try
        {
            LogAction("Bruger bliver registreret:");
            LogAction($"Email: {registerDTO.Email}");

            var brugerDTO = Mapper.Map<BrugerDTO>(registerDTO);

            brugerDTO.Brugerkode = registerDTO.Password;
            brugerDTO.ETag = "12345";
            brugerDTO.ModifiedBy = "system";
            brugerDTO.ChangeHistoryJson = "[]";

            var response = await HttpClient.PostAsJsonAsync("https://localhost:7478/api/bruger", brugerDTO);
            LogAction($"Response status code: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                await HandleErrorResponse(response);
            }
        }
        catch (Exception ex)
        {
            validationErrors.Add($"Registreringen mislykkedes. Fejl: {ex.Message}");
            LogAction($"Registreringsfejl: {ex.Message}");
        }
    }

    private async Task HandleErrorResponse(HttpResponseMessage response)
    {
        var responseContent = await response.Content.ReadAsStringAsync();
        LogAction($"Fejl respons: {responseContent}");

        if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
            if (errorResponse?.ValidationErrors != null)
            {
                validationErrors.AddRange(errorResponse.ValidationErrors);
            }
            else
            {
                validationErrors.Add("Registreringen mislykkedes på grund af en dårlig anmodning.");
            }
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            validationErrors.Add("En konto med denne email eksisterer allerede.");
        }
        else
        {
            validationErrors.Add("Registreringen mislykkedes. Prøv igen senere.");
        }
    }

    private void LogAction(string message)
    {
        if (logs.Count > 50)
        {
            logs.RemoveAt(logs.Count - 1);
        }

        logs.Insert(0, $"{DateTime.Now:HH:mm:ss}: {message}");
    }

    public class ErrorResponse
    {
        public string Message { get; set; } = string.Empty;
        public List<string> ValidationErrors { get; set; } = new();
    }

    private void CheckPasswordStrength(ChangeEventArgs e)
    {
        var password = e.Value?.ToString() ?? string.Empty;
        if (string.IsNullOrEmpty(password))
        {
            PasswordStrengthText = "";
            return;
        }

        int score = 0;

        if (password.Length >= 8) score++;
        if (System.Text.RegularExpressions.Regex.IsMatch(password, @"[A-Z]")) score++;
        if (System.Text.RegularExpressions.Regex.IsMatch(password, @"[a-z]")) score++;
        if (System.Text.RegularExpressions.Regex.IsMatch(password, @"[0-9]")) score++;
        if (System.Text.RegularExpressions.Regex.IsMatch(password, @"[\W_]")) score++;

        if (score <= 2)
        {
            PasswordStrengthText = "Svag adgangskode";
            PasswordStrengthColor = "red";
        }
        else if (score == 3 || score == 4)
        {
            PasswordStrengthText = "Middelstærk adgangskode";
            PasswordStrengthColor = "orange";
        }
        else
        {
            PasswordStrengthText = "Stærk adgangskode";
            PasswordStrengthColor = "green";
        }
    }

}
