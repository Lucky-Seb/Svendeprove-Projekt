@page "/register"
@using Microsoft.AspNetCore.Components.Forms
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.Mapping
@using AutoMapper
@using BCrypt;
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IMapper Mapper

<h3>Register</h3>

<EditForm Model="@registerDTO" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="registerDTO.Email" class="form-control" />
        <small class="form-text text-muted">Enter a valid email address.</small>
    </div>

    <div>
        <label for="brugernavn">Username:</label>
        <InputText id="brugernavn" @bind-Value="registerDTO.Brugernavn" class="form-control" />
        <small class="form-text text-muted">Your username (at least 3 characters). This will be visible to others.</small>
    </div>

    <div>
        <label for="fornavn">First Name:</label>
        <InputText id="fornavn" @bind-Value="registerDTO.Fornavn" class="form-control" />
        <small class="form-text text-muted">Enter your first name.</small>
    </div>

    <div>
        <label for="efternavn">Last Name:</label>
        <InputText id="efternavn" @bind-Value="registerDTO.Efternavn" class="form-control" />
        <small class="form-text text-muted">Enter your last name.</small>
    </div>

    <div>
        <label for="password">Password:</label>
        <InputText id="password" type="password" @bind-Value="registerDTO.Password" class="form-control" />
        <small class="form-text text-muted">Your password (at least 8 characters).</small>
    </div>

    <div>
        <label for="confirmPassword">Confirm Password:</label>
        <InputText id="confirmPassword" type="password" @bind-Value="registerDTO.ConfirmPassword" class="form-control" />
        <small class="form-text text-muted">Re-enter your password for confirmation.</small>
    </div>

    <div>
        <label for="bæltegrad">Bæltegrad (Belt Level):</label>
        <InputText id="bæltegrad" @bind-Value="registerDTO.Bæltegrad" class="form-control" />
        <small class="form-text text-muted">Enter your belt level (e.g., White, Yellow, Black).</small>
    </div>

    <div>
        <label for="address">Address:</label>
        <InputText id="address" @bind-Value="registerDTO.Address" class="form-control" />
        <small class="form-text text-muted">Enter your address.</small>
    </div>

    <div>
        <label for="role">Role:</label>
        <InputText id="role" @bind-Value="registerDTO.Role" class="form-control" />
        <small class="form-text text-muted">Define your role (e.g., Student, Instructor).</small>
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (validationErrors.Any())
{
    <div class="alert alert-danger mt-3">
        <ul>
            @foreach (var error in validationErrors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<!-- App Logs -->
<div class="log-box mt-4" style="max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
    <h5>App Logs</h5>
    <button class="btn btn-sm btn-secondary mb-2" @onclick="() => logs.Clear()">Clear Logs</button>
    @foreach (var log in logs)
    {
        <div>@log</div>
    }
</div>

@code {
    private RegisterDTO registerDTO = new();
    private List<string> validationErrors = new();
    private List<string> logs = new();

    private async Task HandleRegister()
    {
        validationErrors.Clear();

        // Validate input fields
        if (string.IsNullOrWhiteSpace(registerDTO.Email) || string.IsNullOrWhiteSpace(registerDTO.Password) || string.IsNullOrWhiteSpace(registerDTO.ConfirmPassword))
        {
            validationErrors.Add("Email, password, and confirm password are required.");
            return;
        }

        if (registerDTO.Password != registerDTO.ConfirmPassword)
        {
            validationErrors.Add("Passwords do not match.");
            return;
        }

        if (!IsValidEmail(registerDTO.Email))
        {
            validationErrors.Add("Please enter a valid email address.");
            return;
        }

        try
        {
            LogAction("Registering user with the following data:");
            LogAction($"Email: {registerDTO.Email}");
            LogAction($"Username: {registerDTO.Brugernavn}");
            LogAction($"First Name: {registerDTO.Fornavn}");
            LogAction($"Last Name: {registerDTO.Efternavn}");
            LogAction($"Password: {registerDTO.Password}");
            LogAction($"Confirm Password: {registerDTO.ConfirmPassword}");
            LogAction($"Belt Level: {registerDTO.Bæltegrad}");
            LogAction($"Address: {registerDTO.Address}");
            LogAction($"Role: {registerDTO.Role}");

            // Map registerDTO to BrugerDTO (don't hash the password here)
            var brugerDTO = Mapper.Map<BrugerDTO>(registerDTO);

            // Manually populate the fields inherited from SyncableEntityDTO
            brugerDTO.Brugerkode = registerDTO.ConfirmPassword; // Set Brugerkode (must be at least 6 chars, handled above)
            brugerDTO.ETag = "12345"; // Generate a new ETag (or set as required by your backend)
            brugerDTO.ModifiedBy = "system"; // Set a value for ModifiedBy (or use a specific user identifier)
            brugerDTO.ChangeHistoryJson = "[]"; // Set a default value for ChangeHistoryJson (empty JSON array)


            LogAction("Mapped BrugerDTO:");
            LogAction($"Email: {brugerDTO.Email}");
            LogAction($"Username: {brugerDTO.Brugernavn}");
            LogAction($"First Name: {brugerDTO.Fornavn}");
            LogAction($"Last Name: {brugerDTO.Efternavn}");
            LogAction($"Belt Level: {brugerDTO.Bæltegrad}");
            LogAction($"Address: {brugerDTO.Address}");
            LogAction($"Role: {brugerDTO.Role}");
            brugerDTO.Brugerkode = registerDTO.ConfirmPassword;
            // Send the registration request to the backend
            var response = await HttpClient.PostAsJsonAsync("https://localhost:7478/api/bruger", brugerDTO);
            LogAction($"Response status code: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                LogAction($"Error Response: {responseContent}");

                // Handle different types of errors based on the status code
                if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
                {
                    var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                    if (errorResponse?.ValidationErrors != null)
                    {
                        foreach (var error in errorResponse.ValidationErrors)
                        {
                            validationErrors.Add(error);
                        }
                    }
                    else
                    {
                        validationErrors.Add("Registration failed due to bad request.");
                    }
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
                {
                    validationErrors.Add("An account with this email already exists.");
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                {
                    validationErrors.Add("Server error occurred. Please try again later.");
                }
                else
                {
                    validationErrors.Add("Registration failed. Please try again.");
                }
            }
        }
        catch (Exception ex)
        {
            validationErrors.Add($"Registration failed. Error: {ex.Message}");
            LogAction($"Registration exception: {ex.Message}");
        }
    }

    private void LogAction(string message)
    {
        if (logs.Count > 50)
        {
            logs.RemoveAt(logs.Count - 1);
        }

        logs.Insert(0, $"{DateTime.Now:HH:mm:ss}: {message}");
    }

    private bool IsValidEmail(string email)
    {
        return email.Contains("@") && email.Contains(".");
    }

    public class ErrorResponse
    {
        public string Message { get; set; } = string.Empty;
        public List<string> ValidationErrors { get; set; } = new();
    }
}
