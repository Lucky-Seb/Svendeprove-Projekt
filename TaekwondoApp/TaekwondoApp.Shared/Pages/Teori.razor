@page "/teori"
@inject HttpClient Http

<h1>Teori Management</h1>

<!-- Search Filters -->
<div class="row mb-3">
    <div class="col-md-4">
        <label>Search by Name:</label>
        <input class="form-control" @bind="searchName" placeholder="Enter Teknik name..." />
    </div>
    <div class="col-md-4">
        <label>Filter by Pensum:</label>
        <input class="form-control" @bind="filterPensum" placeholder="Enter Pensum ID or Grad..." />
    </div>
    <div class="col-md-4 d-flex align-items-end">
        <button class="btn btn-warning" @onclick="ClearFilters">Clear Filters</button>
        <button class="btn btn-primary ml-2" @onclick="ApplyFilters">Apply Filter</button>
    </div>
</div>

<!-- Display Table -->
@if (filteredTeorier == null)
{
    <p><em>Loading...</em></p>
}
else if (filteredTeorier.Count == 0)
{
    <p><em>No teori records match your search.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Teori ID</th>
                <th>Name</th>
                <th>Description</th>
                <th>Image</th>
                <th>Video</th>
                <th>Audio</th>
                <th>Pensum Grad</th> <!-- Changed header to show Pensum Grad -->
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var teori in filteredTeorier)
            {
                var pensumGrad = pensumList.FirstOrDefault(p => p.PensumID == teori.PensumID)?.PensumGrad ?? "Unknown";

                <tr>
                    <td>@teori.TeoriID</td>
                    <td>@teori.TeoriNavn</td>
                    <td>@teori.TeoriBeskrivelse</td>
                    <td><img src="@teori.TeoriBillede" alt="Teori Image" width="50" /></td>
                    <td><a href="@teori.TeoriVideo" target="_blank">Watch</a></td>
                    <td><a href="@teori.TeoriLyd" target="_blank">Listen</a></td>
                    <td>@pensumGrad</td> <!-- Show Pensum Grad -->
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditTeori(teori)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTeori(teori.TeoriID)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

<hr />

<h3>@(isEditing ? "Edit Teori" : "Add New Teori")</h3>

<EditForm Model="@teori" OnValidSubmit="@(isEditing ? UpdateTeori : CreateTeori)">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Teori Name:</label>
        <InputText class="form-control" @bind-Value="teori.TeoriNavn" required />
    </div>

    <div class="form-group">
        <label>Description:</label>
        <InputTextArea class="form-control" @bind-Value="teori.TeoriBeskrivelse" required />
    </div>

    <div class="form-group">
        <label>Image URL:</label>
        <InputText class="form-control" @bind-Value="teori.TeoriBillede" />
    </div>

    <div class="form-group">
        <label>Video URL:</label>
        <InputText class="form-control" @bind-Value="teori.TeoriVideo" />
    </div>

    <div class="form-group">
        <label>Audio URL:</label>
        <InputText class="form-control" @bind-Value="teori.TeoriLyd" />
    </div>

    <div class="form-group">
        <label>Pensum:</label>
        <select class="form-control" @bind="teori.PensumID">
            <option value="">Select Pensum</option>
            @foreach (var pensum in pensumList)
            {
                <option value="@pensum.PensumID">@pensum.PensumGrad</option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-success">@(isEditing ? "Update" : "Create")</button>
    <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
</EditForm>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private List<TeoriDTO> teorier = new();
    private List<TeoriDTO> filteredTeorier = new();
    private List<PensumDTO> pensumList = new(); // New list for Pensum
    private TeoriDTO teori = new();
    private bool isEditing = false;
    private string? errorMessage;

    private string searchName = "";
    private string filterPensum = ""; // Changed to string to handle both ID and Grad
    protected override async Task OnInitializedAsync()
    {
        await LoadTeorier();
        await LoadPensum();  // Fetch Pensum data
    }

    private async Task LoadTeorier()
    {
        try
        {
            teorier = await Http.GetFromJsonAsync<List<TeoriDTO>>("https://localhost:7174/api/teori");
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading teori records: {ex.Message}";
        }
    }

    private async Task LoadPensum()
    {
        try
        {
            pensumList = await Http.GetFromJsonAsync<List<PensumDTO>>("https://localhost:7174/api/pensum");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading pensum records: {ex.Message}";
        }
    }

    private void ApplyFilters()
    {
        filteredTeorier = teorier
            .Where(t => (string.IsNullOrEmpty(searchName) || t.TeoriNavn.Contains(searchName, StringComparison.OrdinalIgnoreCase)) &&
                        (string.IsNullOrEmpty(filterPensum) ||
                         t.PensumID.ToString().Contains(filterPensum) || // Match PensumID
                         pensumList.Any(p => p.PensumID == t.PensumID && p.PensumGrad.Contains(filterPensum, StringComparison.OrdinalIgnoreCase))) // Match PensumGrad
            )
            .ToList();
    }

    private void ClearFilters()
    {
        searchName = "";
        filterPensum = "";
        ApplyFilters();
    }

    private async Task CreateTeori()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7174/api/teori", teori);
            if (response.IsSuccessStatusCode)
            {
                await LoadTeorier();
                teori = new TeoriDTO();
            }
            else
            {
                errorMessage = "Failed to create teori.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating teori: {ex.Message}";
        }
    }

    private void EditTeori(TeoriDTO selectedTeori)
    {
        teori = selectedTeori;
        isEditing = true;
    }

    private async Task UpdateTeori()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"https://localhost:7174/api/teori/{teori.TeoriID}", teori);
            if (response.IsSuccessStatusCode)
            {
                await LoadTeorier();
                teori = new TeoriDTO();
                isEditing = false;
            }
            else
            {
                errorMessage = "Failed to update teori.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating teori: {ex.Message}";
        }
    }

    private async Task DeleteTeori(int id)
    {
        if (!await ConfirmDelete())
        {
            return;
        }

        try
        {
            var response = await Http.DeleteAsync($"https://localhost:7174/api/teori/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadTeorier();
            }
            else
            {
                errorMessage = "Failed to delete teori.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting teori: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        teori = new TeoriDTO();
        isEditing = false;
    }

    private async Task<bool> ConfirmDelete()
    {
        return await Task.FromResult(true);
    }

    private class TeoriDTO
    {
        public int TeoriID { get; set; }
        public string TeoriNavn { get; set; }
        public string TeoriBeskrivelse { get; set; }
        public string TeoriBillede { get; set; }
        public string TeoriVideo { get; set; }
        public string TeoriLyd { get; set; }
        public int PensumID { get; set; }
    }

    private class PensumDTO
    {
        public int PensumID { get; set; }
        public string PensumGrad { get; set; }
    }
}
