@page "/klub/admin/{klubId:guid}"

@* --- Brugerdefinerede Imports --- *@
@using AutoMapper
@using Microsoft.AspNetCore.SignalR.Client
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Helper
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.ServiceInterfaces
@using TaekwondoApp.Shared.Services

@* --- Afhængighedsinjektion --- *@
@inject NavigationManager NavigationManager
@inject IMapper _mapper
@inject IHttpClientFactory HttpClientFactory
@inject IAuthStateProvider AuthStateProvider
@inject IAuthenticationService AuthenticationService

<h1>Administrer Klub</h1>

@if (!isAuthenticated)
{
    <p>Du er ikke logget ind eller har ikke tilstrækkelige rettigheder til at se denne side.</p>
    <button @onclick="NavigateToLogin">Gå til login</button>
}
else if (!isKlubAdmin)
{
    <p>Du er ikke administrator for denne klub.</p>
}
else
{
    <div class="klub-details">
        <h3>@klubDTO.KlubNavn</h3>
        <p><strong>Beskrivelse:</strong> @klubDTO.KlubNavn</p>

        <h4>Medlemmer:</h4>
        @if (klubBrugere?.Any() == true)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Brugernavn</th>
                        <th>Handlinger</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var member in klubBrugere)
                    {
                        <tr>
                            <td>@member.Brugernavn</td>
                            <td>
                                <button class="btn btn-sm btn-danger" @onclick="() => RemoveMember(member.BrugerID)">Fjern</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Der er endnu ingen medlemmer i denne klub.</p>
        }

        <h4>Klubprogrammer:</h4>
        @if (klubDTO.Programmer?.Any() == true)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Programnavn</th>
                        <th>Handlinger</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var program in klubDTO.Programmer)
                    {
                        <tr>
                            <td>@program.ProgramNavn</td>
                            <td>
                                <button class="btn btn-sm btn-primary" @onclick="() => EditProgram(program.ProgramID)">Rediger</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteProgram(program.ProgramID)">Slet</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Ingen programmer tilgængelige.</p>
        }

        <button class="btn btn-primary" @onclick="NavigateToCreateProgram">Opret nyt program</button>

        <hr>

        <h4>Klubøvelser:</h4>
        @if (klubDTO.Øvelser?.Any() == true)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Øvelsesnavn</th>
                        <th>Handlinger</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var øvelse in klubDTO.Øvelser)
                    {
                        <tr>
                            <td>@øvelse.ØvelseNavn</td>
                            <td>
                                <button class="btn btn-sm btn-primary" @onclick="() => EditØvelse(øvelse.ØvelseID)">Rediger</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteØvelse(øvelse.ØvelseID)">Slet</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Ingen øvelser tilgængelige.</p>
        }
        <button class="btn btn-primary" @onclick="NavigateToCreateØvelse">Opret ny øvelse</button>

        <hr>

        <h4>Klubquizzer:</h4>
        @if (klubDTO.Quizzer?.Any() == true)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Quiznavn</th>
                        <th>Handlinger</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var quiz in klubDTO.Quizzer)
                    {
                        <tr>
                            <td>@quiz.QuizNavn</td>
                            <td>
                                <button class="btn btn-sm btn-primary" @onclick="() => EditQuiz(quiz.QuizID)">Rediger</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteQuiz(quiz.QuizID)">Slet</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Ingen quizzer tilgængelige.</p>
        }
        <button class="btn btn-primary" @onclick="NavigateToCreateQuiz">Opret ny quiz</button>

        @* Events-sektion udeladt, men kan oversættes tilsvarende hvis ønsket *@
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            <p>@errorMessage</p>
        </div>
    }
}


@code {
    [Parameter] public Guid klubId { get; set; }
    private KlubDTO klubDTO = new();
    private bool isAuthenticated;
    private bool isKlubAdmin = false;
    private string errorMessage = string.Empty;
    private HttpClient _apiClient;
    private string token = "";
    private List<BrugerDTO> klubBrugere = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            token = await AuthenticationService.GetTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            isAuthenticated = true;
            _apiClient = HttpClientFactory.CreateClient("ApiClient");

            await LoadKlub();
            await LoadBrugere();
            await CheckIfAdmin();
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl under initialisering: {ex.Message}";
        }
    }

    private async Task LoadKlub()
    {
        try
        {
            var klubResponse = await _apiClient.GetFromJsonAsync<ApiResponse<KlubDTO>>($"api/klub/details/{klubId}");
            if (klubResponse?.Success == true && klubResponse.Data != null)
            {
                klubDTO = klubResponse.Data;
            }
            else
            {
                errorMessage = klubResponse?.Errors?.FirstOrDefault() ?? "Kunne ikke hente klubdata.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved indlæsning af klubdata: {ex.Message}";
        }
    }

    private async Task LoadBrugere()
    {
        try
        {
            var response = await _apiClient.GetFromJsonAsync<ApiResponse<List<BrugerDTO>>>($"api/bruger/klub/{klubId}");
            if (response?.Success == true)
            {
                klubBrugere = response.Data ?? new List<BrugerDTO>();
            }
            else
            {
                errorMessage = response?.Errors?.FirstOrDefault() ?? "Kunne ikke indlæse brugere.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved indlæsning af brugere: {ex.Message}";
        }
    }

    private async Task CheckIfAdmin()
    {
        try
        {
            var token = await AuthenticationService.GetTokenAsync();
            var brugerId = JwtParser.GetUserIdFromJwt(token);
            var response = await _apiClient.GetFromJsonAsync<ApiResponse<bool>>($"api/brugerklub/admin/{brugerId}/{klubId}");

            if (response?.Success == true)
            {
                isKlubAdmin = response.Data;
            }
            else
            {
                errorMessage = response?.Errors?.FirstOrDefault() ?? "Du er ikke administrator for denne klub.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved kontrol af administratorstatus: {ex.Message}";
        }
    }


    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void NavigateToAddMember()
    {
        NavigationManager.NavigateTo($"/admin/klub/{klubId}/add-member");
    }

    private void NavigateToCreateProgram()
    {
        NavigationManager.NavigateTo($"/admin/klub/{klubId}/create-program");
    }

    private void NavigateToCreateEvent()
    {
        NavigationManager.NavigateTo($"/admin/klub/{klubId}/create-event");
    }

    private void EditProgram(Guid programId)
    {
        NavigationManager.NavigateTo($"/admin/klub/{klubId}/edit-program/{programId}");
    }

    private void DeleteProgram(Guid programId)
    {
        DeleteItem("program", programId);
    }

    private void EditEvent(Guid eventId)
    {
        NavigationManager.NavigateTo($"/admin/klub/{klubId}/edit-event/{eventId}");
    }

    private void DeleteEvent(Guid eventId)
    {
        DeleteItem("event", eventId);
    }

    private async Task DeleteItem(string type, Guid id)
    {
        try
        {
            var response = await _apiClient.DeleteAsync($"api/{type}/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadKlub();
            }
            else
            {
                errorMessage = $"Kunne ikke slette {type}. Prøv igen.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl under sletning af {type}: {ex.Message}";
        }
    }
    private void NavigateToCreateØvelse()
    {
        NavigationManager.NavigateTo($"/admin/klub/{klubId}/create-øvelse");
    }
    private void NavigateToCreateQuiz()
    {
        NavigationManager.NavigateTo($"/admin/klub/{klubId}/create-quiz");
    }
    private void EditØvelse(Guid øvelseId)
    {
        NavigationManager.NavigateTo($"/admin/klub/{klubId}/edit-øvelse/{øvelseId}");
    }
    private void EditQuiz(Guid quizId)
    {
        NavigationManager.NavigateTo($"/admin/klub/{klubId}/edit-quiz/{quizId}");
    }
    private void DeleteØvelse(Guid øvelseId)
    {
        DeleteItem("øvelse", øvelseId);
    }
    private void DeleteQuiz(Guid quizId)
    {
        DeleteItem("quiz", quizId);
    }

    private async Task RemoveMember(Guid memberId)
    {
        try
        {
            if (memberId == Guid.Empty)
            {
                errorMessage = "Ugyldigt medlem.";
                return;
            }

            var response = await _apiClient.DeleteAsync($"api/brugerklub/{memberId}/{klubId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadKlub();
            }
            else
            {
                errorMessage = "Kunne ikke fjerne medlemmet. Prøv igen.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl under fjernelse af medlem: {ex.Message}";
        }
    }
}
