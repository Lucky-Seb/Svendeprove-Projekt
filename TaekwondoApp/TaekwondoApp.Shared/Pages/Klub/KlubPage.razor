@page "/klub"
@using AutoMapper
@using Microsoft.AspNetCore.SignalR.Client
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Helper
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.ServiceInterfaces
@using TaekwondoApp.Shared.Services

@inject NavigationManager NavigationManager
@inject IMapper _mapper
@inject IHttpClientFactory HttpClientFactory
@inject AuthStateProvider AuthStateProvider
@inject IAuthenticationService AuthenticationService

<h1>Klub Management</h1>

<!-- Search Filters -->
<div class="row mb-3">
    <div class="col-md-4">
        <label>Search by Klub Name:</label>
        <input class="form-control" @bind="searchKlubName" placeholder="Enter Klub name..." />
    </div>
    <div class="col-md-4 d-flex align-items-end">
        <button class="btn btn-warning" @onclick="ClearFilters">Clear Filters</button>
        <button class="btn btn-primary ml-2" @onclick="ApplyFilters">Apply Filter</button>
    </div>
</div>

<!-- Display Table -->
@if (filteredKlubber == null)
{
    <p><em>Loading...</em></p>
}
else if (filteredKlubber.Count == 0)
{
    <p><em>No Klub records match your search.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var klub in filteredKlubber)
            {
                <tr>
                    <td>
                        <a @onclick="() => NavigateToKlub(klub.KlubID)" style="cursor:pointer; text-decoration: underline;">
                            @klub.KlubNavn
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private List<KlubDTO> availableKlubs = new();
    private List<KlubDTO> filteredKlubber = new();
    private KlubDTO klub = new();
    private bool isEditing = false;
    private string? errorMessage;
    private HttpClient _apiClient;

    private string searchKlubName = "";

    protected override async Task OnInitializedAsync()
    {
        _apiClient = HttpClientFactory.CreateClient("ApiClient");
        await LoadKlubber();
    }

    private async Task LoadKlubber()
    {
        try
        {
            var response = await _apiClient.GetFromJsonAsync<ApiResponse<List<KlubDTO>>>($"api/klub");
            if (response?.Success == true && response.Data != null)
            {
                availableKlubs = _mapper.Map<List<KlubDTO>>(response.Data);
                ApplyFilters();
            }
            else
            {
                errorMessage = "Failed to fetch klub data.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading klub data: {ex.Message}";
        }
    }

    private void ApplyFilters()
    {
        filteredKlubber = availableKlubs
            .Where(k => string.IsNullOrEmpty(searchKlubName) || k.KlubNavn.Contains(searchKlubName, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void ClearFilters()
    {
        searchKlubName = "";
        ApplyFilters();
    }

    private void NavigateToKlub(Guid klubId)
    {
        NavigationManager.NavigateTo($"/klub/{klubId}");
    }
}
