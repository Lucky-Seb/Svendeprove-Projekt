@page "/bruger"

@* --- Using Statements --- *@
@using AutoMapper
@using Microsoft.AspNetCore.SignalR.Client
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Helper
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.ServiceInterfaces
@using TaekwondoApp.Shared.Services
@inject IBrugerSyncService BrugerSyncService
@inject IBrugerSQLiteService SQLiteService
@inject NavigationManager NavigationManager
@inject IMapper _mapper
@inject IHttpClientFactory HttpClientFactory
@inject AuthStateProvider AuthStateProvider
@inject IAuthenticationService AuthenticationService
@implements IAsyncDisposable

<h1>Brugere</h1>

@* --- Status & Internet Controls --- *@
<div class="alert @(internet ? "alert-success" : "alert-warning")">
    Status: @(internet ? "Online - Changes will sync automatically." : "Offline - Changes are stored locally and will sync when you're back online.")
</div>

@if (syncFailed)
{
    <div class="alert alert-danger d-flex justify-content-between align-items-center">
        <span>Last sync attempt failed.</span>
        <button class="btn btn-sm btn-danger" @onclick="TrySyncIfOnline">Retry Sync</button>
    </div>
}
@if (isSyncing)
{
    <div class="d-flex align-items-center mb-3">
        <div class="spinner-border text-primary me-2" role="status">
            <span class="visually-hidden">Syncing...</span>
        </div>
        <span>Syncing local changes...</span>
    </div>
}

@* --- Show Deleted Toggle --- *@
<div class="form-check mb-3">
    <InputCheckbox class="form-check-input" @bind-Value="showDeleted" />
    <label class="form-check-label">Show Deleted Entries</label>
</div>

@* --- Search Section --- *@
<div class="mb-3 row">
    <div class="col-md-4">
        <label>Search (First Name, Last Name, Email):</label>
        <InputText class="form-control" @bind-Value="searchTerm" />
    </div>
    <div class="col-md-4 d-flex align-items-end">
        <button class="btn btn-primary me-2" @onclick="ApplyFilter">Search</button>
        <button class="btn btn-secondary" @onclick="ClearSearch">Clear</button>
    </div>
</div>

@* --- App Logs --- *@
<div class="log-box" style="max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; margin-top: 20px;">
    <h4>App Logs</h4>
    @foreach (var log in logs.Reverse<string>())
    {
        <div>@log</div>
    }
</div>

@* --- User List Table --- *@
@if (filteredBrugere == null || !filteredBrugere.Any())
{
    <p><em>Loading entries...</em></p>
}
else if (!filteredBrugere.Any())
{
    <p><em>No matching entries found.</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Status</th>
                <th>Is Deleted</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var bruger in filteredBrugere)
            {
                <tr>
                    <td>@bruger.BrugerID</td>
                    <td>@bruger.Fornavn</td>
                    <td>@bruger.Efternavn</td>
                    <td>@bruger.Email</td>
                    <td>
                        <span class="badge @(bruger.Status switch
                        {
                            SyncStatus.Pending => "bg-success",
                            SyncStatus.Synced => "bg-warning text-dark",
                            SyncStatus.Failed => "bg-danger",
                            SyncStatus.Deleted => "bg-secondary",
                            _ => "bg-light"
                        })">@bruger.Status</span>
                    </td>
                    <td>
                        <span class="@(bruger.IsDeleted ? "text-danger" : "text-success")">
                            @(bruger.IsDeleted ? "Yes" : "No")
                        </span>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => EditEntry(bruger)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteEntry(bruger.BrugerID)">Delete</button>
                        <button class="btn btn-sm btn-warning" @onclick="() => RestoreEntry(bruger.BrugerID)">Restore</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

@* --- Add/Edit Form --- *@
<h3>@(isEditing ? "Edit User" : "Add New User")</h3>

<EditForm Model="brugerModel" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-2">
        <label>First Name:</label>
        <InputText class="form-control" @bind-Value="brugerModel.Fornavn" required />
    </div>

    <div class="form-group mb-2">
        <label>Last Name:</label>
        <InputText class="form-control" @bind-Value="brugerModel.Efternavn" required />
    </div>

    <div class="form-group mb-2">
        <label>Email:</label>
        <InputText class="form-control" @bind-Value="brugerModel.Email" required />
    </div>

    <button type="submit" class="btn btn-success">@((isEditing ? "Update" : "Create"))</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    // ========== Fields & State ==========
    private BrugerDTO[] filteredBrugere = Array.Empty<BrugerDTO>();
    private List<string> logs = new();
    private BrugerDTO brugerModel = new();
    private bool isEditing = false;
    private bool isSyncing = false;
    private bool syncFailed = false;
    private bool internet = true;
    private bool isAuthenticated;
    private string? role;
    private string searchTerm = string.Empty;
    private string errorMessage = string.Empty;
    private bool showDeleted = false;
    private string token = "";

    private HttpClient _apiClient;
    private HubConnection _hubConnection;

    // ========== Lifecycle ==========
    protected override async Task OnInitializedAsync()
    {
        AuthStateProvider.OnChange += StateChanged;
        StateChanged();

        try
        {
            token = await AuthenticationService.GetTokenAsync();
        }
        catch (Exception ex)
        {
            LogAction($"❌ No Auth Token: {ex.Message}");
            errorMessage = $"Could not get Auth Token: {ex.Message}\n{ex.StackTrace}";
        }

        try
        {
            _apiClient = HttpClientFactory.CreateClient("ApiClient");
            LogAction("App initializing...");

            if (internet)
            {
                LogAction("App has internet. Trying to sync...");
                try
                {
                    await TrySyncIfOnline();
                    LogAction("✅ Synced from server to local.");
                }
                catch (Exception ex)
                {
                    LogAction("❌ Error syncing: " + ex.Message);
                }
            }

            await LoadEntries();
            LogAction("✅ Entries loaded.");

            _hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7478/brugerhub")
                .WithAutomaticReconnect()
                .Build();

            _hubConnection.On("BrugerUpdated", async () =>
            {
                LogAction("🔄 Received BrugerUpdated from server.");
                await LoadEntries();
                await InvokeAsync(StateHasChanged);
            });

            await _hubConnection.StartAsync();
            LogAction("✅ SignalR connection established.");
        }
        catch (Exception ex)
        {
            LogAction($"❌ Initialization error: {ex.Message}");
            errorMessage = $"Error during initialization: {ex.Message}\n{ex.StackTrace}";
        }
    }

    public async ValueTask DisposeAsync()
    {
        AuthStateProvider.OnChange -= StateChanged;
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private void StateChanged()
    {
        isAuthenticated = AuthStateProvider.IsAuthenticated;
        role = AuthStateProvider.Role;
        InvokeAsync(StateHasChanged);
    }

    // ========== Data Loading ==========
    private async Task LoadEntries()
    {
        try
        {
            if (internet)
            {
                await TrySyncIfOnline();
                LogAction("Loading entries from the server...");

                try
                {
                    using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
                    var response = await _apiClient.GetFromJsonAsync<ApiResponse<List<Bruger>>>("api/bruger/including-deleted", cts.Token);

                    if (response?.Success == true)
                    {
                        var allEntries = _mapper.Map<List<BrugerDTO>>(response.Data);
                        filteredBrugere = allEntries.Where(e => showDeleted || !e.IsDeleted).ToArray();
                        LogAction($"{filteredBrugere.Length} entries loaded from the server.");
                    }
                    else
                    {
                        LogAction("Failed to load entries from the server.");
                    }
                }
                catch (Exception ex)
                {
                    LogAction($"Error loading data from server: {ex.Message}");
                }
            }
            else
            {
                // Load from local SQLite database
                LogAction("No internet. Loading entries from SQLite database.");
                filteredBrugere = _mapper.Map<BrugerDTO[]>(await SQLiteService.GetAllEntriesAsync());
                LogAction($"{filteredBrugere.Length} entries loaded from local database.");
            }
        }
        catch (Exception ex)
        {
            LogAction($"❌ Error loading entries: {ex.Message}");
        }
    }

    // ========== Sync & Offline Handling ==========
    private async Task TrySyncIfOnline()
    {
        if (internet)
        {
            try
            {
                isSyncing = true;
                syncFailed = false;

                await BrugerSyncService.SyncAsync();
                LogAction("✅ Sync completed.");
            }
            catch (Exception ex)
            {
                syncFailed = true;
                LogAction($"❌ Sync failed: {ex.Message}");
            }
            finally
            {
                isSyncing = false;
            }
        }
    }

    // ========== CRUD Handling ==========
    private async Task EditEntry(BrugerDTO bruger)
    {
        brugerModel = _mapper.Map<BrugerDTO, BrugerDTO>(bruger);
        isEditing = true;
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        if (isEditing)
        {
            // Update existing
            // Map BrugerDTO to Bruger
            var brugerToUpdate = _mapper.Map<Bruger>(brugerModel);

            // Now you can update the entry
            await SQLiteService.UpdateEntryAsync(brugerToUpdate);
            LogAction("Bruger updated locally.");

            // Try to sync
            await TrySyncIfOnline();
        }
        else
        {
            var brugerToUpdate = _mapper.Map<Bruger>(brugerModel);
            // Create new
            await SQLiteService.AddEntryAsync(brugerToUpdate);
            LogAction("New bruger added locally.");

            // Try to sync
            await TrySyncIfOnline();
        }

        // Reload data
        await LoadEntries();
        CancelEdit();
    }

    private void CancelEdit()
    {
        isEditing = false;
        brugerModel = new BrugerDTO();
    }

    private async Task DeleteEntry(Guid brugerId)
    {
        var result = await SQLiteService.DeleteEntryAsync(brugerId);
        LogAction($"Bruger {brugerId} marked as deleted locally.");
        await LoadEntries();
    }

    private async Task RestoreEntry(Guid brugerId)
    {
        var result = await SQLiteService.MarkAsRestoredAsync(brugerId);
        LogAction($"Bruger {brugerId} restored locally.");
        await LoadEntries();
    }

    private void ApplyFilter()
    {
        filteredBrugere = filteredBrugere
            .Where(b => b.Fornavn.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                || b.Efternavn.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                || b.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToArray();
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        ApplyFilter();
    }

    private void LogAction(string message)
    {
        logs.Insert(0, message);
        if (logs.Count > 50)
        {
            logs.RemoveAt(logs.Count - 1);
        }
    }
}
