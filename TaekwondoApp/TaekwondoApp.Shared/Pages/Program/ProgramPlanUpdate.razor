@page "/programplan/update/{Id:guid}"
@page "/admin/klub/{klubId:guid}/edit-program/{Id:guid}"

@* --- Using Statements --- *@
@using System.Text.Json
@using AutoMapper
@using Microsoft.AspNetCore.SignalR.Client
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Helper
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.ServiceInterfaces
@using TaekwondoApp.Shared.Services

@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject IAuthenticationService AuthenticationService

<h3>Rediger Programplan</h3>

@if (loading)
{
    <p>Indlæser...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    <EditForm Model="editModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Programnavn:</label>
            <InputText @bind-Value="editModel.ProgramNavn" class="form-control" />
        </div>

        <div>
            <label>Beskrivelse:</label>
            <InputTextArea @bind-Value="editModel.Beskrivelse" class="form-control" />
        </div>

        <div>
            <label>Længde (dage):</label>
            <InputNumber @bind-Value="editModel.Længde" class="form-control" />
        </div>

        <div>
            <label>Startdato:</label>
            <InputDate @bind-Value="editModel.OprettelseDato" class="form-control" />
        </div>

        <hr />
        <h5>Træninger</h5>
        <ul class="list-unstyled">
            @foreach (var træning in editModel.Træninger)
            {
                <li class="border rounded p-3 mb-3">
                    <div>
                        <label>Træning Rækkefølge:</label>
                        <InputNumber @bind-Value="træning.TræningRækkefølge" class="form-control" />
                    </div>

                    <div>
                        <label>Øvelse:</label>
                        <select @bind="træning.ØvelseID" class="form-control">
                            <option value="">-- Vælg Øvelse --</option>
                            @foreach (var ø in exerciseList)
                            {
                                <option value="@ø.ØvelseID">@ø.ØvelseNavn</option>
                            }
                        </select>
                    </div>

                    <div>
                        <label>Quiz (Teori):</label>
                        <select @bind="træning.TeoriID" class="form-control">
                            <option value="">-- Vælg Teori --</option>
                            @foreach (var quiz in quizList)
                            {
                                <option value="@quiz.TeoriID">@quiz.TeoriNavn</option>
                            }
                        </select>
                    </div>

                    <div>
                        <label>Teknik:</label>
                        <select @bind="træning.TeknikID" class="form-control">
                            <option value="">-- Vælg Teknik --</option>
                            @foreach (var teknik in teknikList)
                            {
                                <option value="@teknik.TeknikID">@teknik.TeknikNavn</option>
                            }
                        </select>
                    </div>
                </li>
            }
        </ul>

        <button type="submit" class="btn btn-primary">Gem</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Annuller</button>
    </EditForm>
}

@code {
    [Parameter] public Guid Id { get; set; }
    [Parameter] public Guid? klubId { get; set; }

    private ProgramPlanDTO editModel = new();
    private List<ØvelseDTO> exerciseList = new();
    private List<TeoriDTO> quizList = new();
    private List<TeknikDTO> teknikList = new();
    private List<Pensum> pensumGradList = new();

    private HttpClient _apiClient;
    private bool loading = true;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _apiClient = HttpClientFactory.CreateClient("ApiClient");

            var token = await AuthenticationService.GetTokenAsync();
            var brugerId = JwtParser.GetUserIdFromJwt(token);
            Console.WriteLine($"Indlæst BrugerID: {brugerId}");

            // Indlæs Programplan
            var response = await _apiClient.GetFromJsonAsync<ApiResponse<ProgramPlanDTO>>($"api/programplan/{Id}");
            if (response?.Success == true && response.Data != null)
            {
                editModel = response.Data;
                Console.WriteLine("✅ Program indlæst.");
            }
            else
            {
                errorMessage = "Fejl ved indlæsning af programplan.";
                return;
            }

            // Indlæs datalister
            await LoadSelectLists();
        }
        catch (Exception ex)
        {
            errorMessage = $"❌ Fejl ved indlæsning af programplan: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task LoadSelectLists()
    {
        var øResponse = await _apiClient.GetFromJsonAsync<ApiResponse<List<ØvelseDTO>>>("api/øvelse");
        if (øResponse?.Success == true)
            exerciseList = øResponse.Data;

        var teoriResponse = await _apiClient.GetFromJsonAsync<ApiResponse<List<TeoriDTO>>>("api/teori");
        if (teoriResponse?.Success == true)
            quizList = teoriResponse.Data;

        var teknikResponse = await _apiClient.GetFromJsonAsync<ApiResponse<List<TeknikDTO>>>("api/teknik");
        if (teknikResponse?.Success == true)
            teknikList = teknikResponse.Data;

        var pensumResponse = await _apiClient.GetFromJsonAsync<ApiResponse<List<Pensum>>>("api/pensum");
        if (pensumResponse?.Success == true)
            pensumGradList = pensumResponse.Data;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            Console.WriteLine("📤 Indsender opdatering...");
            editModel.ModifiedBy = "system";
            editModel.ETag ??= Guid.NewGuid().ToString();
            editModel.ChangeHistoryJson ??= "[]";

            if (klubId.HasValue)
            {
                Console.WriteLine("Programplan ejet af Klub.");
                editModel.KlubID = klubId.Value;
            }
            else
            {
                var brugerId = JwtParser.GetUserIdFromJwt(await AuthenticationService.GetTokenAsync());
                editModel.BrugerID = brugerId;
            }

            var jsonPayload = JsonSerializer.Serialize(editModel);
            Console.WriteLine($"Payload: {jsonPayload}");

            var response = await _apiClient.PutAsJsonAsync($"api/programplan/{editModel.ProgramID}", editModel);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("✅ Programplan opdateret.");
                if (klubId.HasValue)
                    NavigationManager.NavigateTo($"/admin/klub/{klubId}");
                else
                    NavigationManager.NavigateTo("/account");
            }
            else
            {
                var responseBody = await response.Content.ReadAsStringAsync();
                errorMessage = $"❌ Fejl ved opdatering. Status: {response.StatusCode}\nDetaljer: {responseBody}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"❌ Fejl ved opdatering af programplan: {ex.Message}";
        }
    }

    private void Cancel()
    {
        if (klubId.HasValue)
            NavigationManager.NavigateTo($"/admin/klub/{klubId}");
        else
            NavigationManager.NavigateTo("/account");
    }
}
