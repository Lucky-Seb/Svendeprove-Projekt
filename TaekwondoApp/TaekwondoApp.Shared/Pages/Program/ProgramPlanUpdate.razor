@page "/programplan/update/{Id:guid}"
@page "/admin/klub/{klubId:guid}/edit-program/{Id:guid}"

@* --- Brugerdefinerede namespaces --- *@
@using AutoMapper
@using Microsoft.AspNetCore.SignalR.Client
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Helper
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.ServiceInterfaces
@using TaekwondoApp.Shared.Services

@* --- Dependency Injection --- *@
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject IAuthenticationService AuthenticationService

<h3>Rediger Programplan</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (editModel != null)
{
    <EditForm Model="editModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Programnavn:</label>
            <InputText @bind-Value="editModel.ProgramNavn" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Beskrivelse:</label>
            <InputTextArea @bind-Value="editModel.Beskrivelse" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Længde (dage):</label>
            <InputNumber @bind-Value="editModel.Længde" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Startdato:</label>
            <InputDate @bind-Value="editModel.OprettelseDato" class="form-control" />
        </div>

        <h5>Træninger</h5>
        @if (editModel.Træninger == null)
        {
            <p>Ingen træninger tilføjet.</p>
        }
        else
        {
            <ul class="list-group mb-3">
                @foreach (var træning in editModel.Træninger)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <strong>@træning.TræningRækkefølge</strong>
                        </div>
                        <div>
                            <strong>Quiz:</strong> @træning.Quiz?.QuizNavn
                        </div>
                        <div>
                            <strong>Teori:</strong> @træning.Teori?.TeoriNavn
                        </div>
                        <div>
                            <strong>Teknik:</strong> @træning.Teknik?.TeknikNavn
                        </div>
                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveTræning(træning.TræningID)">Fjern</button>
                    </li>
                }
            </ul>
        }
        <!-- Tilføj ny Træning -->
        <div class="card p-3 bg-light border">
            <h6>Tilføj Træning</h6>

            <div class="mb-2">
                <label>Træning Rækkefølge:</label>
                <InputNumber @bind-Value="newTræning.TræningRækkefølge" class="form-control" />
            </div>
            <div class="mb-2">
                <label>Øvelse:</label>
                <select class="form-control" @bind="newTræning.ØvelseID">
                    <option value="">-- Vælg Øvelse --</option>
                    @foreach (var øvelse in exerciseList)
                    {
                        <option value="@øvelse.ØvelseID">@øvelse.ØvelseNavn</option>
                    }
                </select>
            </div>
            <div class="mb-2">
                <label>Quiz (Teori):</label>
                <select class="form-control" @bind="newTræning.TeoriID">
                    <option value="">-- Vælg Teori --</option>
                    @foreach (var quiz in quizList)
                    {
                        <option value="@quiz.TeoriID">@quiz.TeoriNavn</option>
                    }
                </select>
            </div>
            <div class="mb-2">
                <label>Teknik:</label>
                <select class="form-control" @bind="newTræning.TeknikID">
                    <option value="">-- Vælg Teknik --</option>
                    @foreach (var teknik in teknikList)
                    {
                        <option value="@teknik.TeknikID">@teknik.TeknikNavn</option>
                    }
                </select>
            </div>

            <button type="button" class="btn btn-primary mt-2" @onclick="AddTræning">Tilføj</button>
        </div>

        <button type="submit" class="btn btn-success mt-3">Gem Ændringer</button>
        <button type="button" class="btn btn-secondary mt-3" @onclick="Cancel">Annuller</button>
    </EditForm>
}
else
{
    <p>Indlæser programplan...</p>
}

@code {
    [Parameter] public Guid Id { get; set; }
    [Parameter] public Guid? klubId { get; set; }

    private ProgramPlanDTO editModel = new ProgramPlanDTO();
    private List<ØvelseDTO> exerciseList = new();
    private List<TeoriDTO> quizList = new();
    private List<TeknikDTO> teknikList = new();
    private string errorMessage = "";
    private HttpClient _apiClient;
    private TræningDTO newTræning = new();

    protected override async Task OnInitializedAsync()
    {
        _apiClient = HttpClientFactory.CreateClient("ApiClient");

        try
        {
            // Load program plan
            var response = await _apiClient.GetFromJsonAsync<ApiResponse<ProgramPlanDTO>>($"api/programplan/details/{Id}");
            if (response?.Success == true && response.Data != null)
            {
                editModel = response.Data;
            }
            else
            {
                errorMessage = "Fejl ved indlæsning af programplan.";
            }

            // Load data for exercise, quiz, and technique
            await LoadSelectLists();
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved indlæsning af data: {ex.Message}";
        }
    }

    private async Task LoadSelectLists()
    {
        var exerciseResponse = await _apiClient.GetFromJsonAsync<ApiResponse<List<ØvelseDTO>>>("api/øvelse");
        if (exerciseResponse?.Success == true) exerciseList = exerciseResponse.Data;

        var quizResponse = await _apiClient.GetFromJsonAsync<ApiResponse<List<TeoriDTO>>>("api/teori");
        if (quizResponse?.Success == true) quizList = quizResponse.Data;

        var teknikResponse = await _apiClient.GetFromJsonAsync<ApiResponse<List<TeknikDTO>>>("api/teknik");
        if (teknikResponse?.Success == true) teknikList = teknikResponse.Data;
    }

    private void AddTræning()
    {
        if (newTræning.ØvelseID == Guid.Empty || newTræning.TeoriID == Guid.Empty || newTræning.TeknikID == Guid.Empty)
        {
            errorMessage = "Angiv venligst Øvelse, Teori og Teknik.";
            return;
        }

        newTræning.ProgramID = editModel.ProgramID;

        // Add new training to the list
        editModel.Træninger.Add(newTræning);
        newTræning = new TræningDTO(); // Reset new training entry
    }

    private void RemoveTræning(Guid træningId)
    {
        var træning = editModel.Træninger.FirstOrDefault(t => t.TræningID == træningId);
        if (træning != null)
        {
            editModel.Træninger.Remove(træning);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Ensure the ModifiedBy field is populated for all Træninger
            var token = await AuthenticationService.GetTokenAsync();
            var brugerId = JwtParser.GetUserIdFromJwt(token);

            // Set the ModifiedBy field for all træninger
            foreach (var træning in editModel.Træninger)
            {
                if (string.IsNullOrEmpty(træning.ETag))
                {
                    træning.ETag = "some-etag"; // Set the correct ETag value if available.
                }

                if (string.IsNullOrEmpty(træning.ModifiedBy))
                {
                    træning.ModifiedBy = brugerId.ToString(); // Ensure the user making the change is set.
                }
                træning.ChangeHistoryJson = "[]";

            }

            // Now send the updated program plan with the required fields populated
            var response = await _apiClient.PutAsJsonAsync($"api/programplan/{editModel.ProgramID}", editModel);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("✅ Programplan opdateret.");
                if (klubId.HasValue)
                    NavigationManager.NavigateTo($"/admin/klub/{klubId}");
                else
                    NavigationManager.NavigateTo("/account");
            }
            else
            {
                var responseBody = await response.Content.ReadAsStringAsync();
                errorMessage = $"❌ Fejl ved opdatering. Status: {response.StatusCode}\nDetaljer: {responseBody}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"❌ Fejl ved opdatering af programplan: {ex.Message}";
        }
    }

    private void Cancel()
    {
        if (klubId.HasValue)
            NavigationManager.NavigateTo($"/admin/klub/{klubId}");
        else
            NavigationManager.NavigateTo("/account");
    }
}
