@page "/pensum"
@* --- Brug af namespaces --- *@
@using AutoMapper
@using Microsoft.AspNetCore.SignalR.Client
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Helper
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.ServiceInterfaces
@using TaekwondoApp.Shared.Services

@* --- Dependency Injection --- *@
@inject NavigationManager NavigationManager
@inject IMapper _mapper
@inject IHttpClientFactory HttpClientFactory
@inject AuthStateProvider AuthStateProvider
@inject IAuthenticationService AuthenticationService

<h1>Administrer Pensum</h1>

@if (pensums != null)
{
    <div class="row mb-3">
        <div class="col-md-4">
            <label class="form-label">Filtrer efter grad:</label>
            <select class="form-select" @bind="selectedPensumGrad" @bind:after="ApplyFilter">
                <option value="">Alle</option>
                @foreach (var grad in pensums.Select(p => p.PensumGrad).Distinct())
                {
                    <option value="@grad">@grad</option>
                }
            </select>
        </div>

        <div class="col-md-4">
            <label class="form-label">Søg i Teknik eller Teori:</label>
            <input class="form-control" type="text" placeholder="Søg..." @bind="searchTerm" @bind:event="oninput" />
        </div>
    </div>
}

@if (filteredPensums == null)
{
    <p><em>Indlæser...</em></p>
}
else if (filteredPensums.Length == 0)
{
    <p><em>Ingen pensumdata tilgængelig.</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Grad</th>
                <th>Handlinger</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pensum in filteredPensums)
            {
                <tr>
                    <td>@pensum.PensumGrad</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ToggleExpand(pensum.PensumID)">
                            @(expandedPensums.Contains(pensum.PensumID) ? "Skjul detaljer" : "Vis detaljer")
                        </button>
                    </td>
                </tr>

                @if (expandedPensums.Contains(pensum.PensumID))
                {
                    <tr>
                        <td colspan="3">
                            <div>
                                <h5>Teknik:</h5>
                                @{
                                    var matchingTeknik = pensum.Teknik
                                    .Where(t => string.IsNullOrWhiteSpace(searchTerm) || t.TeknikNavn.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                                    .ToList();
                                }

                                @if (matchingTeknik.Count == 0)
                                {
                                    <p><em>Ingen teknik fundet.</em></p>
                                }
                                else
                                {
                                    @foreach (var teknik in matchingTeknik)
                                    {
                                        <div class="border p-2 mb-2 rounded">
                                            <h6>
                                                <a @onclick="() => NavigateToTeknik(teknik.TeknikID)" style="cursor:pointer;">
                                                    @teknik.TeknikNavn
                                                </a>
                                            </h6>
                                            <p><strong>Beskrivelse:</strong> @teknik.TeknikBeskrivelse</p>

                                            @if (!string.IsNullOrWhiteSpace(teknik.TeknikBillede))
                                            {
                                                <img src="@teknik.TeknikBillede" alt="Billede af teknik" class="img-thumbnail mb-2" style="max-width: 200px;" />
                                            }
                                        </div>
                                    }
                                }

                                <h5>Teori:</h5>
                                @{
                                    var matchingTeori = pensum.Teori
                                    .Where(t => string.IsNullOrWhiteSpace(searchTerm) || t.TeoriNavn.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                                    .ToList();
                                }

                                @if (matchingTeori.Count == 0)
                                {
                                    <p><em>Ingen teori fundet.</em></p>
                                }
                                else
                                {
                                    @foreach (var teori in matchingTeori)
                                    {
                                        <div class="border p-2 mb-2 rounded">
                                            <h6>
                                                <a @onclick="() => NavigateToTeori(teori.TeoriID)" style="cursor:pointer;">
                                                    @teori.TeoriNavn
                                                </a>
                                            </h6>
                                            <p><strong>Beskrivelse:</strong> @teori.TeoriBeskrivelse</p>

                                            @if (!string.IsNullOrWhiteSpace(teori.TeoriBillede))
                                            {
                                                <img src="@teori.TeoriBillede" alt="Billede af teori" class="img-thumbnail mb-2" style="max-width: 200px;" />
                                            }
                                        </div>
                                    }
                                }
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger">
        <strong>Fejl:</strong> @errorMessage
    </div>
}

@code {
    private PensumDTO[] pensums;
    private PensumDTO[] filteredPensums;
    private string? errorMessage;
    private HttpClient _apiClient;
    private string searchTerm = "";
    private HashSet<Guid> expandedPensums = new();
    private string selectedPensumGrad = "";

    protected override async Task OnInitializedAsync()
    {
        _apiClient = HttpClientFactory.CreateClient("ApiClient");
        await LoadPensums();
    }

    private async Task LoadPensums()
    {
        try
        {
            Console.WriteLine($"BaseAddress: {_apiClient.BaseAddress}");

            var response = await _apiClient.GetFromJsonAsync<ApiResponse<List<PensumDTO>>>("api/Pensum");

            if (response != null && response.Success)
            {
                pensums = response.Data.ToArray();
                ApplyFilter();
            }
            else
            {
                errorMessage = "Kunne ikke hente data.";
                if (response?.Errors != null)
                    errorMessage += " Fejl: " + string.Join(", ", response.Errors);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Fejl under hentning af data: " + ex.Message;
        }
    }

    private void ToggleExpand(Guid pensumId)
    {
        if (expandedPensums.Contains(pensumId))
            expandedPensums.Remove(pensumId);
        else
            expandedPensums.Add(pensumId);
    }

    private void NavigateToTeknik(Guid teknikId)
    {
        NavigationManager.NavigateTo($"/teknik/{teknikId}");
    }

    private void NavigateToTeori(Guid teoriId)
    {
        NavigationManager.NavigateTo($"/teori/{teoriId}");
    }

    private void ApplyFilter()
    {
        filteredPensums = pensums
            .Where(p =>
                (string.IsNullOrWhiteSpace(selectedPensumGrad) || p.PensumGrad == selectedPensumGrad) &&
                (
                    string.IsNullOrWhiteSpace(searchTerm) ||
                    p.Teknik.Any(t => t.TeknikNavn.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                    p.Teori.Any(t => t.TeoriNavn.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                )
            )
            .ToArray();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFilter();
    }

    private void OnFilterChanged(ChangeEventArgs e)
    {
        selectedPensumGrad = e.Value?.ToString() ?? "";
        ApplyFilter();
    }
}
