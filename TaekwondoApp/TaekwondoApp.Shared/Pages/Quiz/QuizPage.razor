@page "/quiz"
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.Services
@using TaekwondoApp.Shared.Helper
@using AutoMapper
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject IMapper _mapper
@inject IHttpClientFactory HttpClientFactory
@inject AuthStateProvider AuthStateProvider
@inject IAuthenticationService AuthenticationService

<h1>Quiz Management</h1>

<!-- Search Filters -->
<div class="row mb-3">
    <div class="col-md-4">
        <label>Search by Quiz Name:</label>
        <input class="form-control" @bind="searchQuizName" placeholder="Enter Quiz name..." />
    </div>
    <div class="col-md-4 d-flex align-items-end">
        <button class="btn btn-warning" @onclick="ClearFilters">Clear Filters</button>
        <button class="btn btn-primary ml-2" @onclick="ApplyFilters">Apply Filter</button>
    </div>
</div>

<!-- Display Table -->
@if (filteredQuizzes == null)
{
    <p><em>Loading...</em></p>
}
else if (filteredQuizzes.Count == 0)
{
    <p><em>No quizzes match your search.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var quiz in filteredQuizzes)
            {
                <tr>
                    <td>@quiz.QuizNavn</td>
                    <td>@quiz.QuizBeskrivelse</td>
                    <td>
                        <button class="btn btn-link" @onclick="() => NavigateToQuiz(quiz.QuizID)">View</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private List<QuizDTO> availableQuizzes = new();
    private List<QuizDTO> filteredQuizzes = new();
    private string? errorMessage;
    private HttpClient _apiClient;
    private string token = string.Empty;
    private string searchQuizName = "";
    private BrugerDTO brugerDTO = null;

    protected override async Task OnInitializedAsync()
    {
        _apiClient = HttpClientFactory.CreateClient("ApiClient");
        await LoadQuizzes();
    }

    private async Task LoadQuizzes()
    {
        try
        {
            token = await AuthenticationService.GetTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            var brugerId = JwtParser.GetUserIdFromJwt(token);
            try
            {
                var brugerResponse = await _apiClient.GetFromJsonAsync<ApiResponse<BrugerDTO>>($"api/bruger/details/{brugerId}");
                if (brugerResponse?.Success == true && brugerResponse.Data != null)
                {
                    brugerDTO = brugerResponse.Data;
                    StateHasChanged();
                }
                else
                {
                    errorMessage = "Failed to fetch user data.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error loading user data: {ex.Message}";
            }

            var klubIds = brugerDTO.BrugerKlubber.Select(k => k.KlubID).ToList();
            var klubIdsString = string.Join(",", klubIds);
            // Fetching Quiz data
            var response = await _apiClient.GetFromJsonAsync<ApiResponse<List<QuizDTO>>>(
                $"api/quiz/own/?brugerId={brugerDTO.BrugerID}&klubIds={klubIdsString}");

            if (response?.Success == true && response.Data != null)
            {
                availableQuizzes = _mapper.Map<List<QuizDTO>>(response.Data);
                ApplyFilters();
            }
            else
            {
                errorMessage = "Failed to fetch quizzes.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading quizzes: {ex.Message}";
        }
    }

    private void ApplyFilters()
    {
        filteredQuizzes = availableQuizzes
            .Where(q => string.IsNullOrEmpty(searchQuizName) || q.QuizNavn.Contains(searchQuizName, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void ClearFilters()
    {
        searchQuizName = "";
        ApplyFilters();
    }

    private void NavigateToQuiz(Guid quizId)
    {
        NavigationManager.NavigateTo($"/quiz/{quizId}");
    }
}
