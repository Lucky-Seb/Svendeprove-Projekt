@page "/quiz"
@* --- Using Statements --- *@
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.Services
@using TaekwondoApp.Shared.Helper
@using AutoMapper
@using Microsoft.AspNetCore.SignalR.Client

@* --- Dependency Injection --- *@
@inject NavigationManager NavigationManager
@inject IMapper _mapper
@inject IHttpClientFactory HttpClientFactory
@inject AuthStateProvider AuthStateProvider
@inject IAuthenticationService AuthenticationService

<h1>Quiz Management</h1>

@if (quizzes == null)
{
    <p><em>Loading...</em></p>
}
else if (quizzes.Count == 0)
{
    <p><em>No quizzes available.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var quiz in quizzes)
            {
                <tr>
                    <td>@quiz.QuizNavn</td>
                    <td>@quiz.QuizBeskrivelse</td>
                    <td>
                        <button class="btn btn-link" @onclick="() => NavigateToQuiz(quiz.QuizID)">Vis</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private List<QuizDTO> quizzes = new();
    private string? errorMessage;
    private HttpClient _apiClient;

    protected override async Task OnInitializedAsync()
    {
        _apiClient = HttpClientFactory.CreateClient("ApiClient");
        await LoadQuizzes();
    }

    private async Task LoadQuizzes()
    {
        try
        {
            var response = await _apiClient.GetFromJsonAsync<ApiResponse<List<QuizDTO>>>("api/quiz");
            if (response?.Success == true && response.Data != null)
            {
                quizzes = _mapper.Map<List<QuizDTO>>(response.Data);
            }
            else
            {
                errorMessage = "Failed to fetch quizzes.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading quizzes: {ex.Message}";
        }
    }

    private void NavigateToQuiz(Guid quizId)
    {
        NavigationManager.NavigateTo($"/quiz/{quizId}");
    }
}
