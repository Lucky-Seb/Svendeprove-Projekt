@page "/quiz/{quizId:guid}"

@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.Services
@using TaekwondoApp.Shared.Helper
@using AutoMapper
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject IMapper _mapper
@inject IHttpClientFactory HttpClientFactory
@inject AuthStateProvider AuthStateProvider
@inject IAuthenticationService AuthenticationService

<h2>@quiz?.QuizNavn</h2>

@if (isLoading)
{
    <p><em>Loading quiz...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (quiz == null)
{
    <p>Quiz not found.</p>
}
else
{
    @if (currentQuestionIndex < quiz.Spørgsmål.Count)
    {
        var question = quiz.Spørgsmål.OrderBy(q => q.SpørgsmålRækkefølge).ElementAt(currentQuestionIndex);

        <div class="card shadow-sm p-4 mb-4">
            <h4>Question @(@currentQuestionIndex + 1) of @quiz.Spørgsmål.Count</h4>
            <p><strong>Time remaining:</strong> @timeRemaining seconds</p>

            @if (question.Teori != null)
            {
                <p><strong>Teori:</strong> @question.Teori.TeoriNavn</p>
                <p>@question.Teori.TeoriBeskrivelse</p>
            }
            else if (question.Teknik != null)
            {
                <p><strong>Teknik:</strong> @question.Teknik.TeknikNavn</p>
                <p>@question.Teknik.TeknikBeskrivelse</p>
            }
            else if (question.Øvelse != null)
            {
                <p><strong>Øvelse:</strong> @question.Øvelse.ØvelseNavn</p>
                <p>@question.Øvelse.ØvelseBeskrivelse</p>
            }
            else
            {
                <p><em>No content available for this question.</em></p>
            }

            <!-- Placeholder: Replace with actual answer choices from your model -->
            <div class="mt-3">
                <button class="btn btn-outline-primary me-2" @onclick="() => SubmitAnswer(true)">Answer A</button>
                <button class="btn btn-outline-primary me-2" @onclick="() => SubmitAnswer(false)">Answer B</button>
                <button class="btn btn-outline-primary" @onclick="() => SubmitAnswer(false)">Answer C</button>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-success">
            <h4>Quiz complete!</h4>
            <p>You have completed all questions.</p>
        </div>
    }

    <button class="btn btn-secondary mt-3" @onclick="GoBack">← Back to Quizzes</button>
}

@code {
    [Parameter] public Guid quizId { get; set; }
    private QuizDTO? quiz;
    private string? errorMessage;
    private bool isLoading = true;
    private int currentQuestionIndex = 0;
    private int timeRemaining = 0;
    private System.Timers.Timer? questionTimer;

    private HttpClient _apiClient;

    protected override async Task OnInitializedAsync()
    {
        _apiClient = HttpClientFactory.CreateClient("ApiClient");

        try
        {
            var response = await _apiClient.GetFromJsonAsync<ApiResponse<QuizDTO>>($"api/quiz/details/{quizId}");
            if (response?.Success == true && response.Data != null)
            {
                quiz = response.Data;
                StartQuestionTimer();
            }
            else
            {
                errorMessage = "Could not load quiz.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void StartQuestionTimer()
    {
        if (quiz == null || currentQuestionIndex >= quiz.Spørgsmål.Count)
            return;

        timeRemaining = quiz.Spørgsmål[currentQuestionIndex].SpørgsmålTid;

        questionTimer?.Stop();
        questionTimer = new System.Timers.Timer(1000);
        questionTimer.Elapsed += (sender, args) =>
        {
            if (timeRemaining > 0)
            {
                timeRemaining--;
                InvokeAsync(StateHasChanged);
            }
            else
            {
                questionTimer?.Stop();
                NextQuestion();
            }
        };
        questionTimer.Start();
    }

    private void SubmitAnswer(bool isCorrect)
    {
        // Placeholder logic: you could track answers here
        questionTimer?.Stop();
        NextQuestion();
    }

    private void NextQuestion()
    {
        currentQuestionIndex++;
        if (currentQuestionIndex < quiz?.Spørgsmål.Count)
        {
            StartQuestionTimer();
        }
        else
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/quiz");
    }
}
