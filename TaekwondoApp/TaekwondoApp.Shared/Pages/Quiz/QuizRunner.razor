@page "/quiz/{quizId:guid}"

@using AutoMapper
@using Microsoft.AspNetCore.SignalR.Client
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Helper
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.ServiceInterfaces
@using TaekwondoApp.Shared.Services

@inject NavigationManager NavigationManager
@inject IMapper _mapper
@inject IHttpClientFactory HttpClientFactory
@inject IAuthStateProvider AuthStateProvider
@inject IAuthenticationService AuthenticationService

<h2>@quiz?.QuizNavn</h2>

@if (isLoading)
{
    <p><em>Indlæser quiz...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (quiz == null)
{
    <p>Quiz ikke fundet.</p>
}
else if (currentQuestionIndex < flatQuestions.Count)
{
    var question = flatQuestions[currentQuestionIndex];

    <div class="card shadow-sm p-4 mb-4">
        <h4>Spørgsmål @(@currentQuestionIndex + 1) af @flatQuestions.Count</h4>
        <p><strong>Tid tilbage:</strong> @timeRemaining sekunder</p>

        <p><strong>@question.Type:</strong> @question.QuestionText</p>
        <p>@question.Description</p>

        @if (!string.IsNullOrWhiteSpace(question.Billede))
        {
            <img src="@question.Billede" alt="Billede" class="img-fluid my-2 rounded shadow" />
        }

        @if (!string.IsNullOrWhiteSpace(question.Video))
        {
            <video controls class="w-100 my-2 rounded shadow">
                <source src="@question.Video" type="video/mp4" />
                Din browser understøtter ikke video tag'en.
            </video>
        }

        @if (!string.IsNullOrWhiteSpace(question.Lyd))
        {
            <audio controls class="my-2">
                <source src="@question.Lyd" type="audio/mpeg" />
                Din browser understøtter ikke lyd elementet.
            </audio>
        }

        <div class="mt-3">
            @foreach (var answer in currentAnswers)
            {
                <button class="btn btn-outline-primary me-2" @onclick="() => SubmitAnswer(answer.Text)">@(answer.Text)</button>
            }
        </div>
    </div>
}
else
{
    <div class="alert alert-success">
        <h4>Quiz afsluttet!</h4>
        <p><strong>Korrekte svar:</strong> @correctAnswerCount / @flatQuestions.Count</p>

        <ul class="list-group mt-3">
            @foreach (var ua in userAnswers)
            {
                <li class="list-group-item @(ua.IsCorrect ? "list-group-item-success" : "list-group-item-danger")">
                    <strong>@ua.Question:</strong><br />
                    Dit svar: @ua.SelectedAnswer<br />
                    Korrekt svar: @ua.CorrectAnswer
                </li>
            }
        </ul>

        <button class="btn btn-primary mt-3" @onclick="RetryQuiz">Prøv igen</button>
    </div>
}

<button class="btn btn-secondary mt-3" @onclick="GoBack">← Tilbage til Quizzes</button>

@code {
    [Parameter] public Guid quizId { get; set; }
    private QuizDTO? quiz;
    private string? errorMessage;
    private bool isLoading = true;
    private int currentQuestionIndex = 0;
    private int timeRemaining = 0;
    private int correctAnswerCount = 0;
    private System.Timers.Timer? questionTimer;
    private HttpClient _apiClient;

    private List<ØvelseDTO> availableØvelser = new();
    private List<TeknikDTO> availableTeknikker = new();
    private List<TeoriDTO> availableTeorier = new();

    private List<(string Text, bool IsCorrect)> currentAnswers = new();
    private List<UserAnswer> userAnswers = new();

    private List<DisplayQuestion> flatQuestions = new();

    private record DisplayQuestion(
        string Type,
        string QuestionText,
        string Description,
        string CorrectAnswer,
        Guid ContentId,
        string? Billede,
        string? Video,
        string? Lyd
    );
    private record UserAnswer(string Question, string CorrectAnswer, string SelectedAnswer, bool IsCorrect);

    protected override async Task OnInitializedAsync()
    {
        _apiClient = HttpClientFactory.CreateClient("ApiClient");

        try
        {
            await LoadØvelser();
            await LoadTeknikker();
            await LoadTeorier();

            var response = await _apiClient.GetFromJsonAsync<ApiResponse<QuizDTO>>($"api/quiz/details/{quizId}");
            if (response?.Success == true && response.Data != null)
            {
                quiz = response.Data;
                FlattenQuestions();
                PrepareQuestion();
                StartQuestionTimer();
            }
            else
            {
                errorMessage = "Kunne ikke hente quiz.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FlattenQuestions()
    {
        flatQuestions.Clear();

        foreach (var spm in quiz!.Spørgsmål.OrderBy(s => s.SpørgsmålRækkefølge))
        {
            if (spm.Teori != null)
                flatQuestions.Add(new(
                    "Teori",
                    spm.Teori.TeoriNavn,
                    spm.Teori.TeoriBeskrivelse,
                    spm.Teori.TeoriNavn,
                    spm.Teori.TeoriID,
                    spm.Teori.TeoriBillede,
                    spm.Teori.TeoriVideo,
                    spm.Teori.TeoriLyd
                ));

            if (spm.Teknik != null)
                flatQuestions.Add(new(
                    "Teknik",
                    spm.Teknik.TeknikNavn,
                    spm.Teknik.TeknikBeskrivelse,
                    spm.Teknik.TeknikNavn,
                    spm.Teknik.TeknikID,
                    spm.Teknik.TeknikBillede,
                    spm.Teknik.TeknikVideo,
                    spm.Teknik.TeknikLyd
                ));

            if (spm.Øvelse != null)
                flatQuestions.Add(new(
                    "Øvelse",
                    spm.Øvelse.ØvelseNavn,
                    spm.Øvelse.ØvelseBeskrivelse,
                    spm.Øvelse.ØvelseNavn,
                    spm.Øvelse.ØvelseID,
                    spm.Øvelse.ØvelseBillede,
                    spm.Øvelse.ØvelseVideo,
                    null // Øvelse har ikke lyd
                ));
        }
    }

    private void PrepareQuestion()
    {
        if (currentQuestionIndex >= flatQuestions.Count)
            return;

        var question = flatQuestions[currentQuestionIndex];
        currentAnswers.Clear();

        if (question.Type == "Teori")
        {
            var incorrect = availableTeorier.Where(t => t.TeoriID != question.ContentId)
                .OrderBy(_ => Guid.NewGuid()).Take(2).Select(t => (t.TeoriNavn, false));
            currentAnswers = incorrect.Append((question.CorrectAnswer, true)).OrderBy(_ => Guid.NewGuid()).ToList();
        }
        else if (question.Type == "Teknik")
        {
            var incorrect = availableTeknikker.Where(t => t.TeknikID != question.ContentId)
                .OrderBy(_ => Guid.NewGuid()).Take(2).Select(t => (t.TeknikNavn, false));
            currentAnswers = incorrect.Append((question.CorrectAnswer, true)).OrderBy(_ => Guid.NewGuid()).ToList();
        }
        else if (question.Type == "Øvelse")
        {
            var incorrect = availableØvelser.Where(o => o.ØvelseID != question.ContentId)
                .OrderBy(_ => Guid.NewGuid()).Take(2).Select(o => (o.ØvelseNavn, false));
            currentAnswers = incorrect.Append((question.CorrectAnswer, true)).OrderBy(_ => Guid.NewGuid()).ToList();
        }
    }

    private void StartQuestionTimer()
    {
        timeRemaining = 10;

        questionTimer?.Stop();
        questionTimer = new System.Timers.Timer(1000);
        questionTimer.Elapsed += (s, e) =>
        {
            if (timeRemaining > 0)
            {
                timeRemaining--;
                InvokeAsync(StateHasChanged);
            }
            else
            {
                questionTimer?.Stop();
                SubmitAnswer(""); // timeout, no answer
            }
        };
        questionTimer.Start();
    }

    private void SubmitAnswer(string selectedText)
    {
        questionTimer?.Stop();

        var question = flatQuestions[currentQuestionIndex];
        bool isCorrect = selectedText == question.CorrectAnswer;

        if (isCorrect)
            correctAnswerCount++;

        userAnswers.Add(new UserAnswer($"{question.Type}: {question.QuestionText}", question.CorrectAnswer, selectedText, isCorrect));

        NextQuestion();
    }

    private void NextQuestion()
    {
        currentQuestionIndex++;
        if (currentQuestionIndex < flatQuestions.Count)
        {
            PrepareQuestion();
            StartQuestionTimer();
        }
        else
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadØvelser()
    {
        try
        {
            var response = await _apiClient.GetFromJsonAsync<ApiResponse<List<ØvelseDTO>>>("api/øvelse");
            if (response?.Success == true && response.Data != null)
                availableØvelser = _mapper.Map<List<ØvelseDTO>>(response.Data);
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved indlæsning af øvelse data: {ex.Message}";
        }
    }

    private async Task LoadTeknikker()
    {
        try
        {
            var response = await _apiClient.GetFromJsonAsync<ApiResponse<List<TeknikDTO>>>("api/teknik");
            if (response?.Success == true && response.Data != null)
                availableTeknikker = _mapper.Map<List<TeknikDTO>>(response.Data);
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved indlæsning af teknik data: {ex.Message}";
        }
    }

    private async Task LoadTeorier()
    {
        try
        {
            var response = await _apiClient.GetFromJsonAsync<ApiResponse<List<TeoriDTO>>>("api/teori");
            if (response?.Success == true && response.Data != null)
                availableTeorier = _mapper.Map<List<TeoriDTO>>(response.Data);
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved indlæsning af teori data: {ex.Message}";
        }
    }

    private void RetryQuiz()
    {
        currentQuestionIndex = 0;
        correctAnswerCount = 0;
        userAnswers.Clear();
        FlattenQuestions();
        PrepareQuestion();
        StartQuestionTimer();
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/quiz");
    }
}
