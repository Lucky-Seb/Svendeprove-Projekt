@page "/account"
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Services
@inject IAuthenticationService AuthenticationService
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<h3 class="text-center text-primary mb-4">Account Information</h3>

@if (!isAuthenticated)
{
    <div class="alert alert-warning text-center">
        <p>You need to be logged in to view this page.</p>
        <button @onclick="NavigateToLogin" class="btn btn-info">Go to Login</button>
    </div>
}
else
{
    <div class="container">
        <h4 class="text-center text-success mb-4">Your Account</h4>

        <EditForm Model="user" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="user.Email" class="form-control shadow-sm" />
            </div>

            <div class="form-group">
                <label for="username">Brugernavn</label>
                <InputText id="username" @bind-Value="user.Brugernavn" class="form-control shadow-sm" disabled />
            </div>

            <div class="form-group">
                <label for="firstname">Fornavn</label>
                <InputText id="firstname" @bind-Value="user.Fornavn" class="form-control shadow-sm" />
            </div>

            <div class="form-group">
                <label for="lastname">Efternavn</label>
                <InputText id="lastname" @bind-Value="user.Efternavn" class="form-control shadow-sm" />
            </div>

            <div class="form-group">
                <label for="belt">Bæltegrad</label>
                <InputText id="belt" @bind-Value="user.Bæltegrad" class="form-control shadow-sm" />
            </div>

            <div class="form-group">
                <label for="address">Address</label>
                <InputText id="address" @bind-Value="user.Address" class="form-control shadow-sm" />
            </div>

            <div class="form-group">
                <label for="role">Role</label>
                <InputText id="role" @bind-Value="user.Role" class="form-control shadow-sm" disabled />
            </div>

            <button type="submit" class="btn btn-success btn-block mt-4 shadow-sm">Save Changes</button>
        </EditForm>

        <div class="d-flex justify-content-center mt-4">
            <button @onclick="Logout" class="btn btn-danger btn-lg shadow-sm">Log Out</button>
        </div>
    </div>
}

@code {
    private bool isAuthenticated = false;
    private BrugerDTO user = new BrugerDTO();
    private string? fronttoken;

    protected override async Task OnInitializedAsync()
    {
        fronttoken = await AuthenticationService.GetTokenAsync();
        isAuthenticated = !string.IsNullOrEmpty(fronttoken);

        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }

        // Fetch the user data based on the token
        await LoadUserData();
    }

    private async Task LoadUserData()
    {
        var client = HttpClientFactory.CreateClient("ApiClient");

        try
        {
            // Use the JwtParser to extract the userId from the token
            var userId = JwtParser.GetUserIdFromJwt(fronttoken);

            // Fetch the user data using the extracted userId
            var response = await client.GetAsync($"api/bruger/{userId}");

            if (response.IsSuccessStatusCode)
            {
                var userData = await response.Content.ReadFromJsonAsync<BrugerDTO>();
                if (userData != null)
                {
                    user = userData; // Populate the user object with the fetched data
                }
            }
            else
            {
                Console.WriteLine("Failed to load user data.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user data: {ex.Message}");
        }
    }


    private async Task HandleSubmit()
    {
        var client = HttpClientFactory.CreateClient("ApiClient");

        try
        {
            var userId = await AuthenticationService.GetUserIdFromTokenAsync(fronttoken); // Assuming method to extract user ID

            var response = await client.PutAsJsonAsync($"api/bruger/{userId}", user);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("User data updated successfully.");
            }
            else
            {
                Console.WriteLine("Failed to update user data.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating user data: {ex.Message}");
        }
    }

    private async Task Logout()
    {
        await AuthenticationService.RemoveTokenAsync();
        NavigationManager.NavigateTo("/login", true);
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
}
