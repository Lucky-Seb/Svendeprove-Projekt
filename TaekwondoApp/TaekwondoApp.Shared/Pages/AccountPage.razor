@page "/account"

@* --- Using Statements --- *@
@using TaekwondoApp.Shared.DTO
@using TaekwondoApp.Shared.Models
@using TaekwondoApp.Shared.Services
@using TaekwondoApp.Shared.Helper
@using AutoMapper
@using Microsoft.AspNetCore.SignalR.Client

@* --- Dependency Injection --- *@
@inject NavigationManager NavigationManager
@inject IMapper _mapper
@inject IHttpClientFactory HttpClientFactory
@inject AuthStateProvider AuthStateProvider
@inject IAuthenticationService AuthenticationService

<h1>Account</h1>

@if (!isAuthenticated)
{
    <p>You are not logged in. Please log in first.</p>
    <button @onclick="NavigateToLogin">Go to Login</button>
}
else
{
    <div class="account-details">
        @if (isEditing)
        {
            <h3>Edit Your Profile</h3>
            <EditForm Model="brugerModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div>
                    <label for="brugernavn">Username:</label>
                    <InputText id="brugernavn" @bind-Value="brugerModel.Brugernavn" />
                </div>

                <div>
                    <label for="fornavn">First Name:</label>
                    <InputText id="fornavn" @bind-Value="brugerModel.Fornavn" />
                </div>

                <div>
                    <label for="efternavn">Last Name:</label>
                    <InputText id="efternavn" @bind-Value="brugerModel.Efternavn" />
                </div>

                <div>
                    <label for="email">Email:</label>
                    <InputText id="email" @bind-Value="brugerModel.Email" />
                </div>

                <div>
                    <label for="address">Address:</label>
                    <InputText id="address" @bind-Value="brugerModel.Address" />
                </div>

                <div>
                    <label for="bæltegrad">Belt Grade:</label>
                    <InputText id="bæltegrad" @bind-Value="brugerModel.Bæltegrad" />
                </div>

                <div class="actions">
                    <button type="submit">Save</button>
                    <button type="button" @onclick="CancelEdit">Cancel</button>
                </div>
            </EditForm>
        }
        else
        {
            <h3>Your Profile</h3>
            <p><strong>Username:</strong> @brugerModel.Brugernavn</p>
            <p><strong>First Name:</strong> @brugerModel.Fornavn</p>
            <p><strong>Last Name:</strong> @brugerModel.Efternavn</p>
            <p><strong>Email:</strong> @brugerModel.Email</p>
            <p><strong>Address:</strong> @brugerModel.Address</p>
            <p><strong>Belt Grade:</strong> @brugerModel.Bæltegrad</p>

            <h4>Exercises:</h4>
            @if (brugerModel.Øvelser?.Any() == true)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Difficulty</th>
                            <th>Duration</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var øvelse in brugerModel.Øvelser)
                        {
                            <tr>
                                <td>@øvelse.ØvelseNavn</td>
                                <td>@øvelse.ØvelseSværhed</td>
                                <td>@øvelse.ØvelseTid sec</td>
                                <td>
                                    <button class="btn btn-sm btn-primary" @onclick="() => EditExercise(øvelse.ØvelseID)">Edit</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => PromptDelete(øvelse.ØvelseID)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No exercises available.</p>
            }

            <button class="btn btn-primary" @onclick="NavigateToCreateExercise">Create New Exercise</button>

            <hr>

            <h4>Clubs:</h4>
            @if (brugerModel.Klubber?.Any() == true)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Club Name</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var klub in brugerModel.Klubber)
                        {
                            <tr>
                                <td>@klub.KlubNavn</td>
                                <td>
                                    <button class="btn btn-sm btn-primary" @onclick="() => EditClub(klub.KlubID)">Edit</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => PromptDeleteClub(klub.KlubID)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No clubs available.</p>
            }

            <button class="btn btn-primary" @onclick="NavigateToCreateClub">Create New Club</button>

            <hr>

            <h4>Programs:</h4>
            @if (brugerModel.Programmer?.Any() == true)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Program Name</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var program in brugerModel.Programmer)
                        {
                            <tr>
                                <td>@program.ProgramNavn</td>
                                <td>
                                    <button class="btn btn-sm btn-primary" @onclick="() => EditProgram(program.ProgramID)">Edit</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => PromptDeleteProgram(program.ProgramID)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No programs available.</p>
            }

            <button class="btn btn-primary" @onclick="NavigateToCreateProgram">Create New Program</button>

            <hr>

            <h4>Quizzes:</h4>
            @if (brugerModel.Quizzer?.Any() == true)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Quiz Name</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var quiz in brugerModel.Quizzer)
                        {
                            <tr>
                                <td>@quiz.QuizNavn</td>
                                <td>
                                    <button class="btn btn-sm btn-primary" @onclick="() => EditQuiz(quiz.QuizID)">Edit</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => PromptDeleteQuiz(quiz.QuizID)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No quizzes available.</p>
            }

            <button class="btn btn-primary" @onclick="NavigateToCreateQuiz">Create New Quiz</button>

            <hr>




        }
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            <p>@errorMessage</p>
        </div>
    }

}

@code {
    private BrugerDTO brugerModel = null;
    private bool isEditing = false;
    private bool isAuthenticated;
    private string errorMessage = string.Empty;
    private string token = "";
    private Guid brugerId = new Guid();
    private HttpClient _apiClient;
    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            token = await AuthenticationService.GetTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }
            brugerId = JwtParser.GetUserIdFromJwt(token);

            isAuthenticated = true;
            _apiClient = HttpClientFactory.CreateClient("ApiClient");

            await LoadBruger();

            _hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7478/brugerhub")
                .WithAutomaticReconnect()
                .Build();

            _hubConnection.On("BrugerUpdated", async () =>
            {
                await LoadBruger();
                await InvokeAsync(StateHasChanged);
            });

            await _hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error during initialization: {ex.Message}";
        }
    }

    private async Task LoadBruger()
    {
        try
        {
            var response = await _apiClient.GetFromJsonAsync<ApiResponse<BrugerDTO>>($"api/bruger/details/{brugerId}");
            if (response?.Success == true && response.Data != null)
            {
                brugerModel = response.Data;
            }
            else
            {
                errorMessage = "Failed to fetch user data.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading user data: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Send the updated user data to the API for saving
            var response = await _apiClient.PutAsJsonAsync($"api/bruger/update/{brugerId}", brugerModel);
            if (response.IsSuccessStatusCode)
            {
                // Successfully updated the profile
                isEditing = false;
                await LoadBruger();
            }
            else
            {
                errorMessage = "Failed to update the profile. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating profile: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        // Reset the model to the original values and stop editing.
        isEditing = false;
        // Reload the user data to discard any unsaved changes.
        LoadBruger();
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    // Edit methods
    private void EditExercise(Guid exerciseId)
    {
        // Redirect or perform actions to edit an exercise
        Console.WriteLine($"Editing exercise {exerciseId}");
    }

    private void EditClub(Guid clubId)
    {
        // Redirect or perform actions to edit a club
        Console.WriteLine($"Editing club {clubId}");
    }

    private void EditProgram(Guid programId)
    {
        // Redirect or perform actions to edit a program
        Console.WriteLine($"Editing program {programId}");
    }

    private void EditQuiz(Guid quizId)
    {
        // Redirect or perform actions to edit a quiz
        Console.WriteLine($"Editing quiz {quizId}");
    }

    // Prompt delete methods
    private void PromptDelete(Guid exerciseId)
    {
        // Show confirmation before deleting an exercise
        Console.WriteLine($"Are you sure you want to delete exercise {exerciseId}?");
    }

    private void PromptDeleteClub(Guid clubId)
    {
        // Show confirmation before deleting a club
        Console.WriteLine($"Are you sure you want to delete club {clubId}?");
    }

    private void PromptDeleteProgram(Guid programId)
    {
        // Show confirmation before deleting a program
        Console.WriteLine($"Are you sure you want to delete program {programId}?");
    }

    private void PromptDeleteQuiz(Guid quizId)
    {
        // Show confirmation before deleting a quiz
        Console.WriteLine($"Are you sure you want to delete quiz {quizId}?");
    }

    // Navigation methods
    private void NavigateToCreateExercise()
    {
        NavigationManager.NavigateTo("/øvelse/create");
    }

    private void NavigateToCreateClub()
    {
        NavigationManager.NavigateTo("/create/club");
    }

    private void NavigateToCreateProgram()
    {
        NavigationManager.NavigateTo("/create/program");
    }

    private void NavigateToCreateQuiz()
    {
        NavigationManager.NavigateTo("/create/quiz");
    }
}

