@page "/ordbog"
@inject HttpClient Http
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject ISQLiteService SQLiteService
@using TaekwondoApp.Shared.Services;
@using TaekwondoApp.Shared.DTO;
@inject ISyncService SyncService
@using Microsoft.Maui.Networking;

<h1>Ordbog</h1>

<!-- Search -->
<div class="mb-3 row">
    <div class="col-md-4">
        <label>Search (Dansk/Koransk):</label>
        <InputText class="form-control" @bind-Value="searchTerm" />
    </div>
    <div class="col-md-4 d-flex align-items-end">
        <button class="btn btn-primary me-2" @onclick="ApplyFilter">Search</button>
        <button class="btn btn-secondary" @onclick="ClearSearch">Clear</button>
    </div>
</div>
<div class="log-box" style="max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; margin-top: 20px;">
    <h4>App Logs</h4>
    @foreach (var log in logs.Reverse<string>())
    {
        <div>@log</div>
    }
</div>

<button class="btn btn-primary me-2" @onclick="ChangeInternet">Internet</button>

<!-- List -->
@if (filteredWords == null)
{
    <p><em>Loading entries...</em></p>
}
else if (!filteredWords.Any())
{
    <p><em>No matching entries found.</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Dansk</th>
                <th>Koransk</th>
                <th>Beskrivelse</th>
                <th>Billede</th>
                <th>Lyd</th>
                <th>Video</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var word in filteredWords)
            {
                <tr>
                    <td>@word.DanskOrd</td>
                    <td>@word.KoranskOrd</td>
                    <td>@word.Beskrivelse</td>
                    <td>
                        @if (!string.IsNullOrEmpty(word.BilledeLink))
                        {
                            <img src="@word.BilledeLink" width="50" />
                        }
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(word.LydLink))
                        {
                            <audio controls src="@word.LydLink" />
                        }
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(word.VideoLink))
                        {
                            <a href="@word.VideoLink" target="_blank">Video</a>
                        }
                    </td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => EditEntry(word)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteEntry(word.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<h3>@(isEditing ? "Edit Entry" : "Add New Entry")</h3>

<EditForm Model="entryModel" OnValidSubmit="@(isEditing ? UpdateEntry : CreateEntry)">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-2">
        <label>Dansk Ord:</label>
        <InputText class="form-control" @bind-Value="entryModel.DanskOrd" required />
    </div>

    <div class="form-group mb-2">
        <label>Koransk Ord:</label>
        <InputText class="form-control" @bind-Value="entryModel.KoranskOrd" required />
    </div>

    <div class="form-group mb-2">
        <label>Beskrivelse:</label>
        <InputTextArea class="form-control" @bind-Value="entryModel.Beskrivelse" />
    </div>

    <div class="form-group mb-2">
        <label>Billede Link:</label>
        <InputText class="form-control" @bind-Value="entryModel.BilledeLink" />
    </div>

    <div class="form-group mb-2">
        <label>Lyd Link:</label>
        <InputText class="form-control" @bind-Value="entryModel.LydLink" />
    </div>

    <div class="form-group mb-2">
        <label>Video Link:</label>
        <InputText class="form-control" @bind-Value="entryModel.VideoLink" />
    </div>

    <button type="submit" class="btn btn-success">@((isEditing ? "Update" : "Create"))</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private List<TaekwondoApp.Shared.DTO.OrdbogDTO> entries = new();
    private List<TaekwondoApp.Shared.DTO.OrdbogDTO> filteredWords = new();
    private TaekwondoApp.Shared.DTO.OrdbogDTO entryModel = new();
    private bool isEditing = false;
    private string searchTerm = "";
    private string? errorMessage;
    private HubConnection? _hubConnection;
    private List<string> logs = new();
    private void AddLog(string message)
    {
        logs.Add($"[{DateTime.Now:T}] {message}");
        if (logs.Count > 100) logs.RemoveAt(0); // Optional: keep log size manageable
        StateHasChanged(); // Refresh UI
    }
    private bool _internet = true;

    private bool internet
    {
        get => _internet;
        set
        {
            _internet = value;
            if (Connectivity.NetworkAccess == NetworkAccess.Internet && _internet)
            {
                _ = TrySyncIfOnline(); // trigger sync on toggle if network is present
            }
        }
    }
    private async Task TrySyncIfOnline()
    {
        if (Connectivity.NetworkAccess == NetworkAccess.Internet && internet == true)
        {
            await SyncService.SyncLocalChangesToServerAsync();
            await LoadEntries(); // Reload updated list from server
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Setup SignalR connection
            _hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7478/ordbogHub") // Use your actual hub URL
                .WithAutomaticReconnect()
                .Build();

            // Handle the signal
            _hubConnection.On("OrdbogUpdated", async () =>
            {
                await InvokeAsync(async () =>
                {
                    await LoadEntries();
                    StateHasChanged();
                });
            });
            AddLog("OnInitializedAsync called.");

            await _hubConnection.StartAsync();
            Connectivity.ConnectivityChanged += OnConnectivityChanged;

            // Sync data from server to local SQLite (offline support)
            await SyncService.SyncDataFromServerAsync();
            await SyncService.SyncLocalChangesToServerAsync();

            await LoadEntries();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error initializing SignalR: {ex.Message}";
            Console.WriteLine(ex); // Log to console for debugging
        }
    }
    private async void OnConnectivityChanged(object? sender, ConnectivityChangedEventArgs e)
    {
        var access = e.NetworkAccess;
        AddLog($"Connectivity changed: {access}");

        if (access == NetworkAccess.Internet && internet == true)
        {
            AddLog("Internet available. Attempting to sync...");
            await InvokeAsync(async () =>
            {
                try
                {
                    await SyncService.SyncLocalChangesToServerAsync();
                    AddLog("Sync completed.");
                }
                catch (Exception ex)
                {
                    AddLog($"Sync failed: {ex.Message}");
                }

                await LoadEntries();
                AddLog("Entries reloaded.");
            });
        }
        else if (access == NetworkAccess.None)
        {
            internet = false;
            AddLog("No internet connection.");
            await InvokeAsync(async () =>
            {
                await LoadEntries();
                AddLog("Entries loaded in offline mode.");
            });
        }
        else
        {
            AddLog("Connectivity changed, but sync not triggered.");
        }
    }

    private async Task LoadEntries()
    {
        try
        {
            // Check if there's internet connection
            if (Connectivity.NetworkAccess == NetworkAccess.Internet & internet == true)
            {
                // Fetch from server if online
                var response = await Http.GetFromJsonAsync<List<TaekwondoApp.Shared.DTO.OrdbogDTO>>("https://localhost:7478/api/ordbog");
                if (response != null)
                {
                    entries = response;
                    ApplyFilter();
                }
            }
            else
            {
                // Fetch from SQLite if offline
                entries = await SQLiteService.GetAllEntriesAsync();  // Async call to get entries
                ApplyFilter();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading entries: {ex.Message}";
            Console.WriteLine(ex); // Log to console for debugging
        }
    }
    private void ApplyFilter()
    {
        try
        {
            filteredWords = entries
                .Where(e =>
                    string.IsNullOrEmpty(searchTerm) ||
                    e.DanskOrd.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    e.KoranskOrd.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error applying filter: {ex.Message}";
            Console.WriteLine(ex); // Log to console for debugging
        }
    }
    private void ChangeInternet()
    {
        internet = false;
        LoadEntries();

    }
    private void ClearSearch()
    {
        try
        {
            searchTerm = "";
            ApplyFilter();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error clearing search: {ex.Message}";
            Console.WriteLine(ex); // Log to console for debugging
        }
    }
    private async Task CreateEntry()
    {
        try
        {
            if (Connectivity.NetworkAccess == NetworkAccess.Internet && internet == true)
            {
                var response = await Http.PostAsJsonAsync("https://localhost:7478/api/ordbog", entryModel);
                if (response.IsSuccessStatusCode)
                {
                    await LoadEntries();
                    entryModel = new TaekwondoApp.Shared.DTO.OrdbogDTO();  // Reset entryModel
                }
                else
                {
                    errorMessage = "Failed to create entry.";
                }
            }
            else
            {
                // Save locally if offline
                await SQLiteService.AddEntryAsync(entryModel);  // Async call for adding entry
                await LoadEntries();
                entryModel = new TaekwondoApp.Shared.DTO.OrdbogDTO();  // Reset entryModel
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Create entry error: {ex.Message}";
            Console.WriteLine(ex); // Log to console for debugging
        }
    }

    private async Task UpdateEntry()
    {
        try
        {
            if (Connectivity.NetworkAccess == NetworkAccess.Internet && internet == true)
            {
                var response = await Http.PutAsJsonAsync($"https://localhost:7478/api/ordbog/{entryModel.Id}", entryModel);
                if (response.IsSuccessStatusCode)
                {
                    await LoadEntries();
                    entryModel = new TaekwondoApp.Shared.DTO.OrdbogDTO();  // Reset entryModel
                    isEditing = false;
                }
                else
                {
                    errorMessage = "Failed to update entry.";
                }
            }
            else
            {
                // Update locally if offline
                await SQLiteService.UpdateEntryAsync(entryModel);  // Async update
                await LoadEntries();
                entryModel = new TaekwondoApp.Shared.DTO.OrdbogDTO();  // Reset entryModel
                isEditing = false;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Update entry error: {ex.Message}";
            Console.WriteLine(ex); // Log to console for debugging
        }
    }

    private async Task DeleteEntry(int id)
    {
        try
        {
            if (Connectivity.NetworkAccess == NetworkAccess.Internet && internet == true)
            {
                var response = await Http.DeleteAsync($"https://localhost:7478/api/ordbog/{id}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadEntries();
                }
                else
                {
                    errorMessage = "Failed to delete entry.";
                }
            }
            else
            {
                // Delete locally if offline
                await SQLiteService.DeleteEntryAsync(id);  // Async delete
                await LoadEntries();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Delete entry error: {ex.Message}";
            Console.WriteLine(ex); // Log to console for debugging
        }
    }

    private void EditEntry(TaekwondoApp.Shared.DTO.OrdbogDTO entry)
    {
        try
        {
            entryModel = new TaekwondoApp.Shared.DTO.OrdbogDTO
                {
                    Id = entry.Id,
                    DanskOrd = entry.DanskOrd,
                    KoranskOrd = entry.KoranskOrd,
                    Beskrivelse = entry.Beskrivelse,
                    BilledeLink = entry.BilledeLink,
                    LydLink = entry.LydLink,
                    VideoLink = entry.VideoLink
                };
            isEditing = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error editing entry: {ex.Message}";
            Console.WriteLine(ex); // Log to console for debugging
        }
    }


    private void CancelEdit()
    {
        try
        {
            entryModel = new TaekwondoApp.Shared.DTO.OrdbogDTO();  // Reset entryModel
            isEditing = false;
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Cancel edit error: {ex.Message}";
            Console.WriteLine(ex); // Log to console for debugging
        }
    }
    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_hubConnection is not null)
            {
                await _hubConnection.DisposeAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error disposing SignalR connection: {ex.Message}";
            Console.WriteLine(ex); // Log to console for debugging
        }
        Connectivity.ConnectivityChanged -= OnConnectivityChanged;
    }
    public void CheckNetworkConnectivity()
    {
        if (Connectivity.NetworkAccess == NetworkAccess.Internet && internet == true)
        {
            // Sync when the device is back online
            SyncService.SyncLocalChangesToServerAsync();
        }
    }
}
