@page "/ordbog"
@inject HttpClient Http
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject ISQLiteService SQLiteService
@using TaekwondoApp.Shared.Services;
@using TaekwondoApp.Shared.DTO;
@inject ISyncService SyncService
@using Microsoft.Maui.Networking;
<h1>Ordbog</h1>

<!-- Online/Offline Indicator -->
<div class="alert @(internet ? "alert-success" : "alert-warning")">
    Status: @(internet ? "Online - Changes will sync automatically." : "Offline - Changes are stored locally and will sync when you're back online.")
</div>

<!-- Sync Status UI -->
@if (syncFailed)
{
    <div class="alert alert-danger d-flex justify-content-between align-items-center">
        <span>Last sync attempt failed.</span>
        <button class="btn btn-sm btn-danger" @onclick="TrySyncIfOnline">Retry Sync</button>
    </div>
}
@if (isSyncing)
{
    <div class="d-flex align-items-center mb-3">
        <div class="spinner-border text-primary me-2" role="status">
            <span class="visually-hidden">Syncing...</span>
        </div>
        <span>Syncing local changes...</span>
    </div>
}
<!-- Simulated Internet Toggle -->
<div class="mb-3">
    <button class="btn @(internet ? "btn-outline-danger" : "btn-outline-success")" @onclick="ToggleInternet">
        @(internet ? "Go Offline (Simulated)" : "Go Online (Simulated)")
    </button>
</div>
<!-- Search -->
<div class="mb-3 row">
    <div class="col-md-4">
        <label>Search (Dansk/Koransk):</label>
        <InputText class="form-control" @bind-Value="searchTerm" />
    </div>
    <div class="col-md-4 d-flex align-items-end">
        <button class="btn btn-primary me-2" @onclick="ApplyFilter">Search</button>
        <button class="btn btn-secondary" @onclick="ClearSearch">Clear</button>
    </div>
</div>

<!-- App Logs -->
<div class="log-box" style="max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; margin-top: 20px;">
    <h4>App Logs</h4>
    @foreach (var log in logs.Reverse<string>())
    {
        <div>@log</div>
    }
</div>

<!-- List -->
@if (filteredWords == null)
{
    <p><em>Loading entries...</em></p>
}
else if (!filteredWords.Any())
{
    <p><em>No matching entries found.</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th> <!-- Add ID column -->
                <th>Dansk</th>
                <th>Koransk</th>
                <th>Beskrivelse</th>
                <th>Billede</th>
                <th>Lyd</th>
                <th>Video</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var word in filteredWords)
            {
                <tr>
                    <td>@word.Id</td> <!-- Display ID value here -->
                    <td>@word.DanskOrd</td>
                    <td>@word.KoranskOrd</td>
                    <td>@word.Beskrivelse</td>
                    <td>
                        @if (!string.IsNullOrEmpty(word.BilledeLink))
                        {
                            <img src="@word.BilledeLink" width="50" />
                        }
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(word.LydLink))
                        {
                            <audio controls src="@word.LydLink" />
                        }
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(word.VideoLink))
                        {
                            <a href="@word.VideoLink" target="_blank">Video</a>
                        }
                    </td>
                    <td>
                        @if (word.IsSync)
                        {
                            <span class="badge bg-success">Synced</span>
                        }
                        else
                        {
                            <span class="badge bg-warning text-dark">Pending</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => EditEntry(word)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteEntry(word.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<h3>@(isEditing ? "Edit Entry" : "Add New Entry")</h3>

<EditForm Model="entryModel" OnValidSubmit="@(isEditing ? UpdateEntry : CreateEntry)">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-2">
        <label>Dansk Ord:</label>
        <InputText class="form-control" @bind-Value="entryModel.DanskOrd" required />
    </div>

    <div class="form-group mb-2">
        <label>Koransk Ord:</label>
        <InputText class="form-control" @bind-Value="entryModel.KoranskOrd" required />
    </div>

    <div class="form-group mb-2">
        <label>Beskrivelse:</label>
        <InputTextArea class="form-control" @bind-Value="entryModel.Beskrivelse" />
    </div>

    <div class="form-group mb-2">
        <label>Billede Link:</label>
        <InputText class="form-control" @bind-Value="entryModel.BilledeLink" />
    </div>

    <div class="form-group mb-2">
        <label>Lyd Link:</label>
        <InputText class="form-control" @bind-Value="entryModel.LydLink" />
    </div>

    <div class="form-group mb-2">
        <label>Video Link:</label>
        <InputText class="form-control" @bind-Value="entryModel.VideoLink" />
    </div>

    <button type="submit" class="btn btn-success">@((isEditing ? "Update" : "Create"))</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private List<OrdbogDTO> entries = new();
    private List<OrdbogDTO> filteredWords = new();
    private OrdbogDTO entryModel = new();
    private bool isEditing = false;
    private string searchTerm = "";
    private string? errorMessage;
    private HubConnection? _hubConnection;
    private List<string> logs = new();
    private bool isSyncing = false;
    private bool syncFailed = false;
    private List<int> deletedEntries = new(); // Track deleted entry IDs locally
    private bool internet = true;

    private void AddLog(string message)
    {
        logs.Add($"[{DateTime.Now:T}] {message}");
        if (logs.Count > 100) logs.RemoveAt(0);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7478/ordbogHub")
                .WithAutomaticReconnect()
                .Build();

            _hubConnection.On("OrdbogUpdated", async () =>
            {
                await InvokeAsync(LoadEntries);
            });

            AddLog("Initialized and connected to SignalR hub.");
            await _hubConnection.StartAsync();
            Connectivity.ConnectivityChanged += OnConnectivityChanged;

            // Initial sync and load
            await SyncService.SyncDataFromServerAsync();
            await SyncService.SyncLocalChangesToServerAsync();
            await LoadEntries();
        }
        catch (Exception ex)
        {
            errorMessage = $"Initialization error: {ex.Message}";
            Console.WriteLine(ex);
        }
    }

    private async void OnConnectivityChanged(object? sender, ConnectivityChangedEventArgs e)
    {
        internet = e.NetworkAccess == NetworkAccess.Internet;
        AddLog($"Connectivity changed: {e.NetworkAccess}");
        AddLog($"¨Subscribe work");


        if (internet)
        {
            await TrySyncIfOnline();
        }

        await LoadEntries();
    }

    private async Task TrySyncIfOnline()
    {
        if (Connectivity.NetworkAccess == NetworkAccess.Internet && internet == true)
        {
            isSyncing = true;
            StateHasChanged();

            try
            {
                // Sync the deleted entries with the server (using the correct IDs)
                foreach (var deletedId in deletedEntries)
                {
                    var response = await Http.DeleteAsync($"https://localhost:7478/api/ordbog/{deletedId}");
                    if (response.IsSuccessStatusCode)
                    {
                        // If the deletion was successful on the server, remove from the local list
                        deletedEntries.Remove(deletedId);
                        AddLog($"Synced deleted entry (Online): ID {deletedId}");
                    }
                    else
                    {
                        AddLog($"Failed to sync deleted entry (Online): ID {deletedId}");
                    }
                }

                // Sync any other changes (e.g., creates, updates)
                await SyncService.SyncLocalChangesToServerAsync();
                AddLog($"Synced Local Changes");
                syncFailed = false;
            }
            catch
            {
                syncFailed = true;
            }
            finally
            {
                isSyncing = false;
                await LoadEntries();
            }
        }
    }

    private async Task LoadEntries()
    {
        try
        {
            if (internet)
            {
                // When online, fetch entries from the server
                var response = await Http.GetFromJsonAsync<List<OrdbogDTO>>("https://localhost:7478/api/ordbog");
                entries = response ?? new();
            }
            else
            {
                // When offline, fetch entries from SQLite
                entries = await SQLiteService.GetAllEntriesAsync();
            }

            ApplyFilter(); // Reapply any search filters after loading the data
            StateHasChanged(); // Trigger re-render to update the UI
        }
        catch (Exception ex)
        {
            errorMessage = $"Load error: {ex.Message}";
            Console.WriteLine(ex);
        }
    }

    private void ApplyFilter()
    {
        filteredWords = entries
            .Where(e =>
                string.IsNullOrWhiteSpace(searchTerm) ||
                e.DanskOrd.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                e.KoranskOrd.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void ClearSearch()
    {
        searchTerm = "";
        ApplyFilter();
    }

    private async Task CreateEntry()
    {
        try
        {
            if (!internet)
            {
                entryModel.IsSync = false; // Mark as not synced yet
                await SQLiteService.AddEntryAsync(entryModel);
            }
            else
            {
                var response = await Http.PostAsJsonAsync("https://localhost:7478/api/ordbog", entryModel);
                if (response.IsSuccessStatusCode)
                {
                    var serverEntry = await response.Content.ReadFromJsonAsync<OrdbogDTO>();
                    if (serverEntry != null)
                    {
                        // Update local database with server-assigned ID
                        await SQLiteService.UpdateEntryWithServerIdAsync(serverEntry);
                        entryModel = new(); // Reset the entry after successful creation
                    }
                    await SyncService.SyncDataFromServerAsync();

                }
                else
                {
                    errorMessage = "Failed to create entry on server.";
                }
            }

            await LoadEntries(); // Reload entries after creation
        }
        catch (Exception ex)
        {
            errorMessage = $"Create error: {ex.Message}";
            Console.WriteLine(ex);
        }
    }

    private async Task UpdateEntry()
    {
        try
        {
            // Check if we are offline or online
            if (!internet)
            {
                // When offline, set IsSync to false (because it hasn't been synced yet)
                entryModel.IsSync = false;
                await SQLiteService.UpdateEntryAsync(entryModel);
                AddLog($"Updated entry (Offline): ID {entryModel.Id}");
            }
            else
            {
                // When online, set IsSync to true (because we are syncing to the server)
                entryModel.IsSync = true;
                var response = await Http.PutAsJsonAsync($"https://localhost:7478/api/ordbog/{entryModel.Id}", entryModel);
                if (!response.IsSuccessStatusCode)
                {
                    errorMessage = "Failed to update entry on server.";
                    return;
                }
                await SyncService.SyncDataFromServerAsync();

                AddLog($"Updated entry (Online): ID {entryModel.Id}");

            }

            // Reload the entries to refresh the list after updating the entry
            await LoadEntries();
            entryModel = new();  // Clear the form
            isEditing = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"Update error: {ex.Message}";
            Console.WriteLine(ex);
        }
    }

    private async Task DeleteEntry(int id)
    {
        try
        {
            if (!internet)
            {
                // Offline: Mark the entry as deleted in the local database
                await SQLiteService.DeleteEntryAsync(id);
                deletedEntries.Add(id); // Track the ID of the deleted entry
                AddLog($"Deleted entry (Offline): ID {id}");
            }
            else
            {
                // Online: Attempt to delete the entry on the server
                var response = await Http.DeleteAsync($"https://localhost:7478/api/ordbog/{id}");
                if (!response.IsSuccessStatusCode)
                {
                    errorMessage = "Failed to delete entry on server.";
                    return;
                }

                // If online delete is successful, remove from the local database
                await SQLiteService.DeleteEntryAsync(id);
                await SyncService.SyncDataFromServerAsync();
                AddLog($"Deleted entry (Online): ID {id}");
            }

            // Reload the entries after deletion
            await LoadEntries();
        }
        catch (Exception ex)
        {
            errorMessage = $"Delete error: {ex.Message}";
            Console.WriteLine(ex);
        }
    }

    private void EditEntry(OrdbogDTO entry)
    {
        entryModel = new OrdbogDTO
            {
                Id = entry.Id,
                DanskOrd = entry.DanskOrd,
                KoranskOrd = entry.KoranskOrd,
                Beskrivelse = entry.Beskrivelse,
                BilledeLink = entry.BilledeLink,
                LydLink = entry.LydLink,
                VideoLink = entry.VideoLink,
                IsSync = entry.IsSync
            };
        isEditing = true;
    }

    private void CancelEdit()
    {
        entryModel = new();
        isEditing = false;
        errorMessage = null;
    }

    private void ToggleInternet()
    {
        internet = !internet;

        // Optional: log the internet status change
        logs.Add($"Internet status changed: {(internet ? "Online" : "Offline")}");

        // Reload entries to reflect the status change
        LoadEntries().ConfigureAwait(false); // Ensure async call doesn't block UI
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_hubConnection is not null)
            {
                await _hubConnection.DisposeAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Dispose error: {ex.Message}";
            Console.WriteLine(ex);
        }

        Connectivity.ConnectivityChanged -= OnConnectivityChanged;
    }
}

